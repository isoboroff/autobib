Doctoral Consortium

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Design and Evaluation of Query Auto Completion Mechanisms
Unni Krishnan

The University of Melbourne
Melbourne, Australia
array can be used to implement Mode 3. Navarro [11] provide an
overview and details on succinct variants of these data structures.
Error tolerance is another dimension of QAC systems. By performing a relaxed match allowing up to a number of errors in matching,
Mode 1 [4, 10], Mode 2 or Mode 3 can be made error tolerant. See
Navarro et al. [12] for details.
Experiments to evaluate QAC systems require metrics that can
be used to accurately measure the performance. In terms of the
evaluation data, what are the desirable characteristics (such as
pattern length distribution or variance)? What other characteristics
are important for QAC systems (update time, or other measures for
on-disk implementations, and so on). Can we further devise metrics
to better understand the quality of suggestions?
A user can perform a sequence of operations from the point in
time they start entering a query until they submit it (or abandon
it). Previous studies assume that a query string is entered from left
to right one character at a time [2, 3]. Krishnan et al. [8] present
preliminary observations on devising a framework for capturing
user interactions on a QAC interface and generate synthetic query
patterns. This framework can be extended to better understand how
users interact with QAC systems, and may further help us design
and evaluate these systems better. A major challenge in evaluating
QAC systems is getting access to a character level log capturing
detailed user interactions. We aim to investigate if the synthetic
pattern generation framework can be used as an abstraction to
share query logs without compromising user privacy.

CCS CONCEPTS
• Information systems → Search interfaces; Retrieval efficiency;
Search engine indexing;
ACM Reference Format:
Unni Krishnan. 2018. Design and Evaluation of Query Auto Completion
Mechanisms. In SIGIR ’18: The 41st International ACM SIGIR Conference on
Research & Development in Information Retrieval, July 8–12, 2018, Ann Arbor,
MI, USA. ACM, New York, NY, USA, 1 page. https://doi.org/10.1145/3209978.
3210227

Query Auto Completion (QAC) systems present a list of completions
to a partial query entered by the user. The completions extend the
partial query and are updated with subsequent modifications made
to the partial query. The partial query, or more generally, the query
pattern is matched against a target string collection to retrieve a
candidate set of strings. A scoring function is applied to the strings
in the candidate set to choose a subset of them which are then
presented in a specific order as the final completions.
Krishnan et al. [8] define a set of QAC modes based on how a
query pattern is matched with the target string collection. Each
QAC mode produces distinct candidate sets and results in different completions being presented. A taxonomy of QAC modes will
help us better understand the effects of match functions, desirable
characteristics of an effective QAC method and their applicability
to specific scenarios. The taxonomy proposed by Krishnan et al.
[8] can be further refined to multiple dimensions such as error
tolerance, phrase completions (without considering the order of
the tokens), and completions on sub-tokens (complete just the final
token vs complete each token).
From an implementation aspect, each QAC mode needs specific
algorithmic strategies and index structures. We measure the computational efficiency of different implementation strategies in terms
of index memory, index construction time, querying and update
time. For instance, a trie [1, 6, 7] is a commonly used data structure
for prefix lookup, denoted “Mode 1". A different querying mode
suggested by Bast and Weber [2] splits the pattern P based on white
spaces and presents completions containing tokens having a prefix match with each query tokens. We call this Mode 2. Typical
implementations for this mode (or its variants) use an inverted
index [2, 5] to map the tokens to the documents they appear in
and computes document list intersections for tokens from query
pattern. If a pattern match is performed on the tokens instead of
prefix match (as in Mode 2), we get “Mode 3”. A suffix tree or suffix

Acknowledgement. Unni Krishnan receives top-up scholarship
from the Microsoft Research Centre for Social Natural User Interfaces (SocialNUI) at The University of Melbourne.

REFERENCES
[1] N. Askitis and R. Sinha. Hat-trie: A cache-conscious trie-based data structure for
strings. In Proc. Aust. Comp. Sc. Conf., pages 97–105, 2007.
[2] H. Bast and I. Weber. Type less, find more: Fast autocompletion search with a
succinct index. In Proc. SIGIR, pages 364–371, 2006.
[3] H. Bast and I. Weber. The CompleteSearch engine: Interactive, efficient, and
towards IR & DB integration. In Proc. CIDR, pages 88–95, 2007.
[4] S. Chaudhuri and R. Kaushik. Extending autocompletion to tolerate errors. In
Proc. SIGMOD, pages 707–718, 2009.
[5] D. Hawking and B. Billerbeck. Efficient in-memory, list-based text inversion. In
Proc. Aust. Doc. Comp. Symp., pages 5:1–5:8, 2017.
[6] S. Heinz, J. Zobel, and H. E. Williams. Burst tries: A fast, efficient data structure
for string keys. ACM Trans. Inf. Sys., 20:192–223, 2002.
[7] B.-J. P. Hsu and G. Ottaviano. Space-efficient data structures for top-k completion.
In Proc. WWW, pages 583–594, 2013.
[8] U. Krishnan, A. Moffat, and J. Zobel. A taxonomy of Query Auto Completion
modes. In Proc. Aust. Doc. Comp. Symp., pages 6:1–6:8, 2017.
[9] L. Li, H. Deng, A. Dong, Y. Chang, H. Zha, and R. Baeza-Yates. Analyzing user’s
sequential behavior in query auto-completion via Markov processes. In Proc.
SIGIR, pages 123–132, 2015.
[10] M. G. Maaß and J. Nowak. Text indexing with errors. J. Alg., 5:662 – 681, 2007.
[11] G. Navarro. Compact Data Structures: A Practical Approach. Cambridge University
Press, 2016.
[12] G. Navarro, R. Baeza-Yates, E. Sutinen, and J. Tarhio. Indexing methods for
approximate string matching. IEEE. Data Eng. Bull., 24:19–27, 2001.

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
SIGIR ’18, July 8–12, 2018, Ann Arbor, MI, USA
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5657-2/18/07.
https://doi.org/10.1145/3209978.3210227

1463

