Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Modeling Diverse Relevance Patterns in Ad-hoc Retrieval
Yixing Fan†,‡ , Jiafeng Guo†,‡ , Yanyan Lan†,‡ , Jun Xu†,‡ , Chengxiang Zhai∗ and Xueqi Cheng†,‡
†University of Chinese Academy of Sciences, Beijing, China
Key Lab of Network Data Science and Technology, Institute of Computing Technology,
Chinese Academy of Sciences, Beijing, China
∗ Department of Computer Science University of Illinois at Urbana-Champaign, IL, USA
fanyixing@software.ict.ac.cn,{guojiafeng,lanyanyan,junxu,cxq}@ict.ac.cn,czhai@illinois.edu
‡ CAS

ABSTRACT

1

Assessing relevance between a query and a document is challenging
in ad-hoc retrieval due to its diverse patterns, i.e., a document could
be relevant to a query as a whole or partially as long as it provides
sufficient information for users’ need. Such diverse relevance patterns require an ideal retrieval model to be able to assess relevance
in the right granularity adaptively. Unfortunately, most existing
retrieval models compute relevance at a single granularity, either
document-wide or passage-level, or use fixed combination strategy,
restricting their ability in capturing diverse relevance patterns. In
this work, we propose a data-driven method to allow relevance
signals at different granularities to compete with each other for
final relevance assessment. Specifically, we propose a HIerarchical
Neural maTching model (HiNT) which consists of two stacked components, namely local matching layer and global decision layer. The
local matching layer focuses on producing a set of local relevance
signals by modeling the semantic matching between a query and
each passage of a document. The global decision layer accumulates
local signals into different granularities and allows them to compete
with each other to decide the final relevance score. Experimental
results demonstrate that our HiNT model outperforms existing
state-of-the-art retrieval models significantly on benchmark ad-hoc
retrieval datasets.

A central question in ad-hoc retrieval is how to learn a generalizable
function that can well assess relevance between a query and a document. One of the major difficulties for relevance assessment lies in
that there might be diverse relevance patterns between a query and
a document. As revealed by the evaluation policy in TREC ad-hoc
task [6, 32], “a document is judged relevant if any piece of it is
relevant (regardless of how small the piece is in relation to the rest
of the document)1 ”. In other words, a document could be relevant
to a query as a whole or partially as long as it provides sufficient
information for users’ needs. Such diverse relevance patterns might
be highly related to the heterogeneity of long documents in ad-hoc
retrieval. As discussed by Robertson and Walker [30], there are two
underlying hypotheses concerning document structures in relevance judgement, i.e. verbosity hypothesis and scope hypothesis [30].
With the Verbosity Hypothesis a long document might be relevant
to a query as a whole, while with the Scope Hypothesis the relevant
parts could be in any position of a long document, and thus it could
be partially relevant to a query.
The diverse relevance patterns call for a retrieval model to be
able to assess relevance at the right granularity adaptively in ad-hoc
retrieval. Unfortunately, most existing retrieval models operate at a
single granularity, either document-wide or passage-level. Specifically, document-wide approaches compare a document as a whole
to a query. For example, most probabilistic retrieval methods (e.g.,
BM25 or language models) and learning-to-rank models [8, 15]
rely on document-wide feature statistics for relevance computation.
Obviously, such document-wide approaches are difficult to model
finer-granularity relevance signals, leading to potential biases on
the competition between long and short documents [25]. On the
other hand, Passage-level approaches segment a document into
passages and aggregate passage-level signals for relevance computation [4, 20, 31]. However, the performance of existing passagebased approaches is mixed when applied to a variety of test beds
[35] by only using simple manually designed operations over the
passage-level signals. There have been a few efforts [2, 35] trying
to combine both document-wide and passage-level methods. For
example, Bendersky et al. [2] integrated the query-similarity on a
document and its passages using document-homogeneity. Wang
et al. [35] combined the document retrieval results with passage
retrieval results using a heuristic function [19]. However, by using
a fixed combination strategy, these models cannot fully capture the
diverse relevance patterns for different query-document pairs.

CCS CONCEPTS
• Information systems → Learning to rank;

KEYWORDS
relevance patterns; ad-hoc retrieval; neural network
ACM Reference Format:
Yixing Fan†, ‡ , Jiafeng Guo†, ‡ , Yanyan Lan†, ‡ , Jun Xu†, ‡ , Chengxiang Zhai∗
and Xueqi Cheng†, ‡ . 2018. Modeling Diverse Relevance Patterns in Adhoc Retrieval. In SIGIR ’18: The 41st International ACM SIGIR Conference
on Research & Development in Information Retrieval, July 8–12, 2018, Ann
Arbor, MI, USA. ACM, New York, NY, USA, 10 pages. https://doi.org/10.1145/
3209978.3209980
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGIR ’18, July 8–12, 2018, Ann Arbor, MI, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5657-2/18/07. . . $15.00
https://doi.org/10.1145/3209978.3209980

INTRODUCTION

1 http://trec.nist.gov/data/reljudge_eng.html

375

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

2.1

Recently, deep neural models have been applied to ad-hoc retrieval. These data-driven methods have shown their expressive
power in end-to-end learning relevance matching patterns between
queries and documents [10, 14, 23]. However, most existing neural
matching models, either representation-focused [14] or interactionfocused [10], belong to the document-wide approaches. For example, the representation-focused models aim to learn a document representation to compare with the query representation,
while the interaction-focused models learn from a matching matrix/histogram between a document and a query. To the best of
our knowledge, so far there have been no neural matching model
proposed to learn relevance signals from both document-wide and
passage-level explicitly for modeling diverse relevance patterns in
ad-hoc retrieval.
In this paper, we propose a data-driven method to automatically
learn relevance signals at different granularities (i.e. passage-level
and document-wide), and allow them to compete with each other
for final relevance assessment. Specifically, we propose a HIerarchical Neural maTching model (HiNT) which consists of two stacked
components, namely local matching layer and global decision layer.
The local matching layer focuses on producing a set of local relevance signals between a query and each passage of a document.
Many well-known information retrieval (IR) heuristics that characterize the relevance matching between a query and a passage can be
encoded in this layer for high quality signal generation. Specifically,
we employ a spatial GRU model [34] for the relevance matching
between a query and a passage, which can well capture semantic
relations, proximities, and term importance. The global decision
layer aims to accumulate passage-level signals into different granularities and allow them to compete with each other to form the
final relevance score. Flexible strategies are applied in this layer to
model diverse relevance patterns. Specifically, we utilize a hybrid
network architecture to accumulate local signals, and select signals
from both passage-level and document-wide to generate the final
relevance score.
We evaluate the effectiveness of the proposed model based on
two representative ad-hoc retrieval benchmark datasets from the
LETOR collection [28]. For comparison, we take into account several well-known traditional retrieval models, learning to rank models, and deep neural matching models. These models belong to
document-wide, passage-level and hybrid approaches. The empirical results show that our model can outperform all the baselines
in terms of all the evaluation metrics. We also provide detailed
analysis on HiNT model, and conducte case studies to verify the
diverse relevance patterns captured by our model over different
query-document pairs.

2

Document-wide Approaches

Document-wide approaches, by its name, collect and make relevance assessment based on document-wide signals. There have been
a large number of retrieval models under this branch. Firstly, traditional retrieval models [1, 30, 39], collect lexical matching signals
(e.g., term frequency) from the whole document, and make relevance assessment under some probabilistic framework. For example,
the well-known BM25 model [30] collects term frequencies and document length and employs a scoring function derived under the 2poisson model to compute relevance based on these document-wide
signals. Secondly, most machine learning based retrieval methods,
including learning to rank models and deep learning models, are
also belong to this branch. For learning to rank methods [3, 15, 38],
they typically involve two stages, a feature construction stage and
a model learning stage. The feature construction stage could be
viewed as to define (or collect) relevance signals for a document
given a query. Typically, there are three type of features, including
query dependent features, document independent features, and
query-document dependent features. Most of these features are
defined at document level, such as tf-idf scores, BM25 scores, and
PageRank. Based on these features, linear [15] or non-linear [3, 38]
models are learned to produce the relevance score by optimizing
some ranking based loss functions. For deep learning methods
[10, 14, 24, 26], they can be categorized into two types according to
their architectures [10], namely representation-focused models and
interaction-focused models. The representation-focused models,
such as ARCI [13] and DSSM [14], aim to learn a low-dimensional
abstractive representation for the whole document, and compare
it with the query representation. The interaction-focused models,
such as DRMM [10] and Duet [24], learn from a matching matrix/histogram between a document and a query to produce a set
of document-wide matching signals for final relevance prediction.
Although in interaction-focused models, document-wide signals
are usually generated from local signals, there is no competition
between document-wide signals and local signals for capturing
diverse relevance patterns.
Since document-wide approaches take document as a whole,
these methods are often difficult to model fine-granularity relevance
signals. Meanwhile, by using document-wide statistics as relevance
signals, it often leads to certain bias on the competition between
long and short documents [25], since long documents are likely to
contain stronger signals on average.

2.2

Passage-level Approaches

As opposed to document-wide methods, passage-level methods
collect signals from passages to make relevance assessment on
the document. Note here we focus on document retrieval using
passage-level signals, and will not include the work taking passages
as retrieval units [16].
In passage-level methods, documents are usually pre-segmented
into small passages. Callan [4] studied how passages can be defined,
and how passage signals can be incorporated into document retrieval. In [20], Liu et al. computed a language model for each
passage as relevance signals. The final assessment is made by choosing the highest score from all the passages. Their results showed
passage-based retrieval can provide more reliable performance than

RELATED WORK

A large number of retrieval methods have been proposed in the past
few decades [4, 23, 28, 30]. Without loss of generality, we divide existing methods into three folds, namely document-wide approaches,
passage-level approaches and hybrid approaches, based on what
kind of relevance signals they rely on for relevance assessment. We
will briefly review these studies in the follows.

376

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Figure 1: The Architecture of the Hierarchical Neural Matching Model.
full document retrieval. In [21], Lv et al. proposed a positional language model in which the relevance score at each position can
propagate to nearby positions within certain distance. In other
words, each position can be viewed as a "soft passage" by aggregating language model scores within a context window. Based on
the signals at each position, they proposed three strategies, namely
best position strategy, multi-position strategy and multi-σ strategy,
for final relevance assessment.
As we can see, passages are convenient text units for local signal
collection to support flexible relevance assessment over documents.
However, previous passage-level methods often employed simplified aggregation strategies, thus cannot well capture the diverse
relevance patterns for different query-document pairs.

2.3

layer accumulates passage-level signals into different granularities
and allows them to compete with each other to generate the final
relevance score. The architecture is illustrated in Figure 1. We will
describe these components in detail in the follows.

3.1

Hybrid Approaches

ei = f (Pi , Q),

There also have been a few efforts [2, 35, 37] trying to combine
both document-wide and passage-based methods. For example,
Callan [4] conducted experiments on four TREC 1 and 2 collections
and concluded that it was always better to combine documentwide scores and passage-level scores. A later study by Xi et al.
[37] re-examined fixed-size window passages on TREC 4 and 5.
Contrary to Callan [4], they did not obtain an improvement by
linearly combine passage-level score and document-level score.
Wang et al. [35] proposed a discriminative probabilistic model in
capturing passage-level signals, and combined the document-level
scores and passage-level scores through a heuristic function (i.e.,
CombMNZ function [19]). However, by using a unified combination
strategy, these models cannot fully capture the diverse relevance
patterns in different query-document pairs, leading to the mixed
performance on different datasets [35, 37].

3

Local Matching Layer

The local matching layer focuses on producing a set of passage-level
relevance signals by modeling the relevance matching between a
query and each passage of a document. Formally, each document D
is first represented as a set of passages D = [P1 , P2 , ..., P K ], where
K denotes the number of passages in a document. Then, a set of
passage-level relevance signals E = [e1 , e2 , ..., eK ] are produced by
applying some relevance matching model f over a query Q and
each passage Pi .
i = 1, . . . , K .

There are two major questions concerning this layer, i.e., how
to define the passage Pi and how to define the relevance matching model f . For passages, there have been three types of definitions: discourse, semantic, and window [4]. Discourse passages
are defined based upon textual discourse units (e.g., sentences,
paragraphs, and sections). Semantic passages are based upon the
subject or content of the text (e.g., TextTiling). Window passages
are obtained based upon a number of words. Among these methods,
window passage is the most widely adopted due to its simplicity
but surprisingly effectiveness as demonstrated by many previous
passage-level retrieval models [2, 4, 31, 35].
For the relevance matching model, in general, any model that
can address the relevance matching between a query and a passage
can be leveraged here. For example, one may employ statistical
language model [39], or use manually defined features [28, 36], or
even employ some deep models for text matching [14, 34]. However,
the quality of the passage-level signals produced by the relevance
matching model is a critical foundation for the final relevance assessment. Therefore, we argue that a relevance matching model
should be able to encode many well-known IR heuristics to be
qualified in this layer. According to previous studies, such heuristics at least include the modeling of exact matching and semantic
matching [7, 10], proximity [33], term importance [10] and so on.

HIERARCHICAL NEURAL MATCHING
MODEL

In this work, we introduce a HIerarchical Neural maTching (HiNT)
model for ad-hoc retrieval to explicitly model the diverse relevance
patterns. In an abstract level, the model consists of two stacked components, namely local matching layer and global decision layer. The
local matching layer employs deep matching networks to automatically learn the passage-level relevance signals ; The global decision

377

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

vector Si j = [xi , yj , Mi j ] by concatenating two corresponding comQ
pressed term embeddings as in [27], where xi = wi ∗ Ws and
(P )

yj = wj ∗ Ws , here, Ws is the transformation parameter to be
learned.
Based on these two query-passage interaction tensors, a spatial GRU (Gated Recurrent Units) is applied to generate the relevance matching evidences. The spatial GRU, also referred to as
2-dimensional Gated-RNN, is a special case of multidimensional
RNN [9]. It is a recursive model which scans the input tensor from
top left to bottom right:
→
− cos
→
− cos →
− cos →
− cos
cos
H i j = д( H i−1,
j , H i, j−1 , H i−1, j−1 , Si j ),
→
− xor
→
− xor →
− xor →
− xor
xor
H i j = д( H i−1,
j , H i, j−1 , H i−1, j−1 , Si j ),

Figure 2: The Architecture of Relevance Matching Network.

→
−
where д denotes the spatial GRU unit as described in [34], H icos
j
→
−
cos and
and H ixor
denotes
the
hidden
state
of
the
spatial
GRU
over
S
j
Sxor , respectively. We can take the last hidden representation HM, L
−e is then
as the matching output. The local relevance evidence →
generated by concatenating the two matching outputs:
− cos →
−
→
−e = [→
H
, H xor ].

Based on these above ideas, in this work, we propose to use
fixed-size window to define the passage, and employ an existing
spatial GRU model [34] for the relevance matching between a query
and each passage. This spatial GRU model is good at modeling the
matching between two pieces of texts based on primitive word
features, and has shown better performances as compared with
other deep matching models [34]. We now describe the specific
implementation in the follows.

M, L

3.1.1 The Input Layer. Following the idea in [11], term vectors
are employed as basic representations so that rich semantic relations
between query and document terms can be captured. Formally, both
query and document are represented as a sequence of term vectors
(Q )
(Q )
(D)
(D)
denoted by Q = [w1 , ..., wM ] and D = [w1 , ..., wN ], where
(Q )

3.2

3.1.2 Deep Relevance Matching Network. The architecture of the
relevance matching network is shown in Figure 2. Firstly, the termlevel interaction matrix is constructed based on the term vectors
from the query-passage pair. Here we constructed two matching
matrices, a semantic matching matrix Mcos and an exact matching
matrix (i.e., xor-matrix) Mxor , defined as follows:
(Q )

(
Mixor
j

=

=

wi

(Q )

|wi

(P )

wj

,

(P )

| · |wj |

(Q )

(P )

= wj

1,

i f wi

0,

otherwise

Global Decision Layer

Based on passage-level signals generated in the previous step, the
global decision layer attempts to accumulate these signals into
different granularities and allow them to compete with each other
for final relevance assessment. As we have discussed before, the
relevance patterns of a query-document pair can be rather flexible
and diverse, allowing a document to be relevant to a query partially
or as a whole. Accordingly, the global decision layer is expected
to be able to accommodate various decision strategies, rather than
using some restrictive combination rules [2, 35] .
In this work, we propose to employ a hybrid neural network
architecture which has sufficient expressive power to support flexible relevance patterns. Before we describe the hybrid model, we
first introduce two basic models under some simplified relevance
assumptions.
1. Independent Decision (ID) Model assumes the independence among passage-level signals, and selects top-k
signals directly for final relevance assessment. This model
is under the assumption that a document is relevant if any
piece of it can provide sufficient relevance information. Specifically, as shown in Figure 3(a), a dimension-wise k-max
pooling layer is first applied over the passage-level signals
to select top-k signals, and the selected signals are then concatenated and projected into a multi-layer perceptron to get
the final decision score.
2. Accumulative decision (AD) Model accumulates the
passage-level signals in a sequential manner, and selects
top-k accumulated signals for relevance assessment. Here,

(D)

wi , i = 1, ..., M and wj , j = 1, ..., N denotes a query term vector
and a document term vector, respectively. To obtain the passages,
we follow previous approaches [2, 4, 35] to use fixed-size sliding
window to segment the document into passages. In this way, the
(P )
(P )
passage is defined as P = [w1 , ..., wL ], where L denotes the
window size.

Micos
j

M, L

Furthermore, in order to enrich the relevance signals, we also
applied the spatial GRU in the reverse direction, i.e., from bottom
right to top left. The final passage-level signal is defined as the
concatenation of the two-direction matching signals:
−e , ←
e = [→
e−].

.

The key idea of two input matrices is to distinguish the exact matching signals from the semantic matching signals explicitly since the
former provides critical information for ad-hoc retrieval as suggested by [7, 10]. Note that in Mcos exact matching and semantic
matching signals are mixed together. To further incorporate term
importance, we extend each element of Mi j to a three-dimensional

378

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Figure 3: Different decision models based on the collected passage signals.
Table 1: Statistics of the datasets used in this study.

we adopt long-short term memory network (LSTM) [12], a
powerful model for variable-length sequential data, to accumulate the relevance signals from each passage. Specifically,
as shown in Figure 3(b), we first feed the passage-level signals into LSTM sequentially to generate the accumulated
relevance signals at different positions.Based on the accumulated relevance signals, we then apply a dimension-wise
k-max pooling layer to select top-k signals, and feed the
selected signals into a multi-layer perceptron for final relevance assessment. Here, we also applied the LSTM in the
reverse direction to accumulate the relevance signals, as
user’s reading can be in any direction of the document[29].
Note here if we directly use the last/first hidden state in
LSTM as signals for relevance assessment, it would reduce
to a document-wide method. By using k-max pooling over
all the positions, we actually assume the relevance could be
based on a text span flexible in scale, ranging from multiple
passages to the whole document.

MQ2007
MQ2008

#docs
65,323
14,384

#q_rel
1455
564

#rel_per_q
10.3
3.7

model. Specifically, given a triple (q, d + , d − ), where d + is ranked
higher than d − with respect to a query q, the loss function is defined
as:
L(q, d + , d − ; θ ) = max(0, 1 − s(q, d + ) + s(q, d − )),
where s(q, d) denotes the relevance score for (q, d), and θ includes
the parameters in both local matching layer and global decision
layer. The optimization is relatively straightforward with standard backpropagation. We apply stochastic gradient decent method
Adam [17] with mini-batches(100 in size), which can be easily parallelized on a single machine with multi-cores.

4

Based on the two basic models, now we introduce the Hybrid
Decision (HD) Model as a specific implementation of the global
decision layer. The HD model is a mixture of the previous two
models, and picks top-k signals from passage-level or accumulated
signals for final relevance assessment. Obviously, this is the most
flexible relevance model, which allows a document to be assessed
as a whole or partially adaptively. Specifically, as depicted in figure 3(c), we allow the relevance signals from different passages
to compete with accumulated signals. Note here in order to make
a fair competition, for the passage-level signals, we conduct an
additional non-linear transformation to ensure a similar scale to
the accumulated relevance signals.

EXPERIMENT

In this section, we conduct experiments to demonstrate the effectiveness of our proposed model on benchmark collections.

4.1

Experimental Settings

We first introduce our experimental settings, including datasets,
baseline methods/implementations, and evaluation methodology.
4.1.1 Data Sets. To evaluate the performance of our model, we
conducted experiments on two LETOR benchmark datasets [28]:
Million Query Track 2007 (MQ2007) and Million Query Track 2008
(MQ2008). We choose these two datasets according to three criteria:
1) there is a large number of queries, 2) the original document content is available, and 3) the dataset is public. The first two criterias
are important for learning deep neural models for ad-hoc retrieval,
and the last one is critical for reproducibility. Both datasets use
the GOV2 collection which includes 25 million documents in 426
gigabytes. The details of the two datasets are given in Table 1. As
we can see, there are 1692 queries on MQ2007 and 784 queries on
MQ2008. The number of queries with at least one relevant document is 1455 and 564, respectively. The average number of relevant
document per query is about 10.3 and 3.7 on MQ2007 and MQ2008,
respectively.

vt = tanh(Wv et + bv ),
where vt denotes the t-th transformed passage signals, Wv and
bv are parameters to be learned. We then apply a dimension-wise
k-max pooling layer to select top-k signals, and feed the selected
signals into a multi-layer perceptron for final assessment.

3.3

#queries
1692
784

Model Training

Since the ad-hoc retrieval task is fundamentally a ranking problem,
we utilize the pairwise ranking loss such as hinge loss to train our

379

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Duet: Duet [24] is a joint model which learns local lexical
matching and global semantic matching together.
DeepRank: DeepRank [27] is a state-of-the-art deep matching model which models relevance by simulating the human
judgement process.

For pre-processing, all the words in documents and queries are
white-space tokenized, lower-cased, and stemmed using the Krovetz
stemmer [18]. Stopword removal is performed on query and document words using the INQUERY stop list [5]. Words occurred less
than 5 times in the collection are removed from all the document.
We further segmented documents into passages for all the models
using passage-level information. We utilized fixed-size sliding window without overlap to generate passages. We have also studied
the performance of different window size in Section 4.5.

Here, for DSSM, we directly utilize the trained model3 released
by their authors since training these complex models on small
benchmark datasets could lead to severe over-fitting problem. For
DeepRank4 , we use the code released by their authors. For Duet
model, we train it by ourselves since there is no trained model
released. To avoid overfitting, we reduce the parameters of the
convolutional network and fully-connected network to adapt the
model to the limited size of LETOR datasets. Specifically, we set
the filter size as 10 in both local model and global model, and the
hidden size as 20 in the fully-connected layer. Other parameters
are the same as the original paper.
We refer to our proposed model as HiNT5 . For network configurations (e.g., numbers of layers and hidden nodes), we tuned the
hyper-parameters via the validation set. Specifically, in the local
matching layer, the dimension of the spatial GRU is set to 2 which
is tuned in [1, 2, 3, 4]. In the global decision layer, the dimension
of LSTM is set to 6 which is tuned in [4, 5, 6, 7, 8, 9, 10], the k-max
pooling size is set to 10 which is tuned in [1, 5, 10, 15, 20], and the
multi-layer perceptron is a 2-layers feed forward network without
hidden layers. All the trainable parameters are initialized randomly
by uniform distribution within [−0.1, 0.1]. Overall, the number of
trainable parameters is about 930 in our HiNG model. Note that
the MQ2008 dataset has much smaller query and document size,
we find it is not sufficient to train deep models purely based on
this dataset. Therefore, for all the deep models, we chose to use the
trained model on MQ2007 as the initialization and fine tuned the
model on MQ2008.
For all deep models based on term vector inputs, we used 50dimension term vectors. The term vectors were trained on wikipedia corpus6 using the CBOW model [22] with the default parameters7 . Specifically, we used 10 as the context window size, 10 negative samples and a subsampling of frequent words with sampling
threshold of 10−4 . Out-of-vocabulary words are randomly initialized by sampling values uniformly from (−0.02, 0.02).

4.1.2 Baselines Methods. We adopt three types of baselines for
comparison, including traditional retrieve models, learning to rank
models and deep matching models.
For traditional retrieval models, we consider both documentwide methods, passage-level methods, and hybrid methods:
BM25: The BM25 model [30] is a classical and highly effective document-wide retrieval model.
MSP: The Max-Scoring Passage model [20] utilizes language
model for each passage and rank the document according to
the score of their best passage.
PLM: The passage language model [2] integrates passagelevel and document-wide language model scores according
to the document homogeneity for ad-hoc retrieval.
PPM: The probabilistic passage model [35] is a discriminative probabilistic model in capturing passage-level signals,
and combines document retrieval scores with passage retrieval scores through a linear interpolate function.
Learning to rank models include
AdaRank: AdaRank [38] is a representative pairwise model
which aims to directly optimize the performance measure
based on boosting approach. Here we utilize NDCG as the
performance measure function.
LambdaMart: LambdaMart [3] is a representative listwise
model that uses gradient boosting to produce an ensemble
of retrieval models. It is the state-of-the-art learning to rank
algorithm.
Here, AdaRank and LambdaMart were implemented using RankLib2 , which is a widely adopted learning to rank tool. All the learning to rank models leveraged the 46 human designed features from
LETOR. Furthermore, since our model utilized passage-level information, we introduced 9 passage-based features for fair comparison.
Specifically, we calculated tf-idf, BM25 and language model scores
for each query-passage pair, and picked the maximum, minimum
and average scores across passages as the new features for a document. We applied the full set of features (original+passage features)
on both two learning to rank models for additional comparison,
denoted by AdaRank(+P) and LambdaMart(+P), respectively.
Deep matching models include
DSSM: DSSM [14] is a neural matching model proposed for
Web search. It consists of a word hashing layer, two nonlinear hidden layers, and an output layer.
DRMM: DRMM [10] is a neural relevance model designed
for ad-hoc retrieval. It consists of a matching histogram
mapping, a feed forward matching network and a term gating
network.

4.1.3 Evaluation Methodology. We follow the data partition on
this dataset in Letor4.0 [28], and 5 fold cross-validation is conducted
to minimize over-fitting as in [10]. Specifically, the parameters for
each model are tuned on 4-of-5 folds. The last fold in each case is
used for evaluation. This process is repeated 5 times, once for each
fold. The results reported are the average over the 5 folds.
As for evaluation measure, precision (P), mean average precision (MAP) and normalized discounted cumulative gain (NDCG) at
position 1, 5, and 10 were used in our experiments. We performed
significant tests using the paired t-test. Differences are considered
statistically significant when the p−value is lower than 0.05.
3 https://www.microsoft.com/en-us/research/project/dssm/
4 https://github.com/pl8787/textnet-release
5 https://github.com/faneshion/HiNT
6 http://en.wikipedia.org/wiki/Wikipedia_database
7 https://code.google.com/archive/p/word2vec/

2 https://sourceforge.net/p/lemur/wiki/RankLib/

380

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Table 2: Analysis on local matching layer on MQ2007. Significant improvement or degradation with respect to our implementation (Sxor +Scos +spatial GRU) is indicated (+/-) (p-value ≤ 0.05)

Local Matching Layer
Mxor +MLP
Mcos +MLP
Mhist +MLP
Mxor +spatial GRU
Mcos +spatial GRU
Mxor +Mcos +spatial GRU
Sxor +Scos +spatial GRU

4.2

Exact
matching
√
√
√
√
√
√
√

Semantic
matching
√
√
√
√
√

IR Heuristics
Exact/Semantic
Distinguished

Performance
Proximity

Term
Importance

√
√
√
√
√

√
√

√

Analysis on the HiNT Model

HiNTID

In this section we conducted experiments to compare different implementations of the two components in the HiNT model. Through
these experiments, we try to gain a better understanding of the
model.

P@10

NDCG@10

MAP

0.384−
0.329−

0.435−
0.344−

0.393−
0.387−
0.396−
0.405−
0.418

0.447−
0.444−
0.449−
0.470−
0.490

0.461−
0.386−
0.469−
0.465−
0.470−
0.484−
0.502

HiNTAD

50.2

performance (%)

50

4.2.1 Analysis on Local Matching Layer. As mentioned in Section 3.1, the local matching layer should be able to encode many
well-known IR heuristics in order to well capture the relevance
matching between a query and a passage. The heuristics at least
include the modeling of exact matching and semantic matching signals, the differentiation between them, the modeling of proximity,
the term importance, and so on. Here we conduct experiments to
test a variety of implementations of the local matching layer which
encode different IR heuristics by fixing the rest parts of the model.
The implementations include: (1) We apply a multi-layer perceptron over the exact matching matrix Mxor to produce the passagelevel signals. In this way, only exact matching signals are encoded
into the passage-level signal; (2) We apply a multi-layer perceptron
over the semantic matching matrix Mcos to produce the passagelevel signals. In this way, both exact and semantic matching signals
are encoded but mixed together; (3) We follow the idea in [10] to
turn the semantic matching matrix Mcos into matching histograms
Mhist , and use a multi-layer perceptron to produce the passage-level
signals. In this way, both exact matching and semantic matching
signals are encoded and these two types of signals are differentiated
by using the histogram; (4) We apply a spatial GRU over the exact
matching matrix Mxor to produce the passage-level signals. In this
way, only exact matching signals and proximity are encoded into
the signals; (5) We apply a spatial GRU over the semantic matching
matrix Mcos to produce the passage-level signals. In this way, exact
matching and semantic matching signals are mixed and encoded
together with proximity information. (6) We use a spatial GRU
over both exact matching and semantic matching signals. Here,
the exact matching and semantic matching signals can be clearly
differentiated. Finally, we use our proposed implementation, i.e., a
spatial GRU over the Sxor and Scos tensors, which can encode exact
matching signals, semantic matching signals, proximity and term
importance. The different implementations of the local matching
layer as well as their performance results are shown in Table 2.
From the results we observe that, when modeling exact matching signals alone, Mxor + MLP can already obtain reasonably good
retrieval performance. It indicates that exact matching signals are

HiNTHD

49.0
47.2

48
46

48.3
46.4

44.6

44
41.8

42
40

40.5
38.9

38
36
P@10

NDCG@10

MAP

Figure 4: Performance comparison of HiNT over different
decision models on MQ2007.

critical in ad-hoc retrieval [10]. Meanwhile, the performance drops
significantly when semantic matching signals are mixed with exact
matching signals (Mcos + MLP), but increases if these two types
of signals are clearly differentiated (Mhist + MLP). These results
demonstrate that semantic matching signals are also useful for
retrieval, but should better be distinguished from exact matching signals if the deep model itself (e.g., MLP) cannot differentiate them. If the deep model can somehow implicitly distinguish
these two types of signals, e.g., spatial GRU using input gates, we
can observe better performance on the semantic matching matrix (Mcos + spatialGRU ) than that on the exact matching matrix
(Mxor + spatialGRU ). However, we can further observe performance increase if we explicitly distinguish exact matching and semantic matching signals (Mxor + Mcos + spatialGRU ). Besides, the
local matching layers using spatial GRU can in general obtain better results, indicating that proximity is very helpful for retrieval.
Finally, by further considering term importance, our proposed implementation (Sxor + Scos + spatialGRU ) can outperform all the
variants significantly. All the results demonstrate the importance
of encoding a variety of IR heuristics in the local matching layer
for a successful relevance judgement model.
4.2.2 Analysis on Global Decision Layer. We further study the effect of different implementations of the global decision layer. Here
we compare the proposed hybrid decision model (i.e., HiNTHD )
with the two basic decision models introduced in Section 3.2 (i.e.,

381

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Table 3: Comparison of different retrieval models over the MQ2007 and MQ2008 datasets. Significant improvement or degradation with respect to HiNT is indicated (+/-) (p-value ≤ 0.05).

Model Name
BM25
MSP
PLM
PPM
AdaRank
LambdaMart
AdaRank(+P)
LambdaMart(+P)
DSSM
DRMM
Duet
DeepRank
HiNT

P@1
0.427−
0.361−
0.416−
0.431−
0.449−
0.481−
0.457−
0.484−
0.345−
0.450−
0.473−
0.508
0.515

P@5
0.388−
0.358−
0.389−
0.393−
0.403−
0.418−
0.408−
0.427−
0.359−
0.417−
0.428−
0.452−
0.461

Model Name
BM25
MSP
PLM
PPM
AdaRank
LambdaMart
AdaRank(+P)
LambdaMart(+P)
DSSM
DRMM
Duet
DeepRank
HiNT

P@1
0.408−
0.332−
0.396−
0.412−
0.434−
0.449−
0.428−
0.441−
0.341−
0.450−
0.452−
0.482−
0.491

P@5
0.337−
0.314−
0.326−
0.338−
0.342
0.346
0.345
0.348
0.284−
0.337−
0.341−
0.359−
0.367

MQ2007
P@10 NDCG@1
0.366−
0.358−
0.350−
0.302−
0.371−
0.348−
0.370−
0.361−
0.372−
0.394−
−
0.384
0.412−
0.380−
0.393−
0.391−
0.413−
−
0.352
0.290−
0.388−
0.380−
0.398−
0.409−
0.412−
0.441
0.418
0.447
MQ2008
P@10 NDCG@1
0.245
0.344−
0.236−
0.283−
0.240−
0.327−
0.241−
0.350−
0.243
0.368−
0.249
0.376−
0.247
0.368−
0.249
0.372−
0.221−
0.286−
−
0.242
0.381−
0.240−
0.385−
0.252
0.406−
0.255
0.415

HiNTID and HiNTAD ) by fixing the rest parts of the model. The comparison results are shown in Figure 4. As we can see, the simplest
relevance model HiNTID performs worst. It seems that selecting
passage-level signals independently might be too simple to capture
diverse relevance patterns. Meanwhile, HiNTAD performs better
than HiNTID , indicating that it is more beneficial to make relevance
assessment based on accumulated signals from a variety of text
spans. Finally, HiNTHD achieves the best performance in terms of
all the evaluation measures. This further indicates that there might
be very diverse relevance patterns across different query-document
pairs. By allowing competition between passage-level and accumulated signals, the expressive power of the HD model is the largest,
leading to the best performance among the three variants.

4.3

NDCG@5
0.384−
0.341−
0.377−
0.392−
0.410−
0.421−
0.408−
0.427−
0.335−
0.408−
0.431−
0.457−
0.463

NDCG@10
0.414−
0.378−
0.413−
0.424−
0.436−
0.446−
0.438−
0.454−
0.371−
0.440−
0.453−
0.482−
0.490

MAP
0.450−
0.422−
0.449−
0.453−
0.460−
0.468−
0.467−
0.473−
0.409−
0.467−
0.474−
0.497
0.502

NDCG@5
0.461−
0.415−
0.438−
0.464−
0.468
0.471
0.475
0.479
0.378−
0.466−
0.471−
0.496
0.501

NDCG@10
0.220−
0.193−
0.208−
0.220−
0.221
0.230
0.225
0.232
0.178−
0.219−
0.216
0.240
0.244

MAP
0.465−
0.426−
0.452−
0.468−
0.476
0.478
0.478
0.480
0.391−
0.473−
0.476−
0.498−
0.505

By integrating document-wide with passage-level signals, the performance of PLM and PPM is mixed compared with BM25, demonstrating the deficiency of the simple combination strategy, which
is consistent with previous findings [35]. Secondly, all the learning
to rank models perform significantly better than the traditional retrieval models. This is not surprising since learning to rank models
can make use of rich features, where BM25 scores and LM scores
are typical features among them. Among the two learning to rank
models, LambdaMart performs better. Moreover, we can see that
adding passage-level features might improve the performance of
learning to rank models, but not consistent on different datasets.
For example, the performance of AdaRank and LambdaMart in
terms of P@1 on MQ2008 drops when adding passage features.
Thirdly, as for the deep matching models, we can see that DSSM
obtain relatively poor performances on both datasets, even cannot
compete with the traditional retrieval models. This is consistent
with previous findings [10], showing that one may not work well on
ad-hoc retrieval by only leveraging the cosine similarity between
high-level abstract representations of short query and long document. As for DRMM and Duet, they have achieved relative better
performance compared with DSSM. This may due to the fact that
they are specifically designed for the relevance matching in adhoc retrieval, and they have incorporated important IR heuristics
into their model. However, they can only reach comparable performance as learning to rank models by only using document-wide

Comparison of Retrieval Models

In this section, we compare our proposed HiNT against existing
retrieval models over the two benchmark datasets. Note here we
refer HiNT to the model using hybrid decision model based on both
exact matching and semantic matching tensors. The main results
of our experiments are summarized in Table 3.
Firstly, for the traditional models, we can see that BM25 is a
strong baseline which performs better than MSP. The relative poor
performance of MSP indicates that it is deficient in capturing the
diverse relevance patterns by only using the passage-level signals.

382

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

Figure 5: Examples of different decision strategies over the query-document pair.
matching signals. The recently introduced DeepRank achieves a
relative better performance by simulating the human judgement
process. However, DeepRank aggregates relevance signals from
query-centric contexts to form document-wide relevance score
for each query term, it cannot well capture the diverse relevance
patterns between query-document pairs.
Finally, we observe that HiNT can outperform all the existing
models in terms of all the evaluation measures on both datasets
by allowing the competition between the passage-level signals and
document-wide signals explicitly. It is worth noting that in the
learning to rank methods, there are many human designed features
including those document-wide and passage-level matching signals,
as well as those about the quality of the document (e.g., PageRank).
While in our HiNT, all the assessment are purely learned from
the primitive word features of queries and documents. Therefore,
the superior performance of HiNT suggests the importance and
effectiveness of modeling the diverse relevance patterns for ad-hoc
retrieval.

P@10

MAP

50.2

50

49.0

performance (%)

48.5

48

47.5

49.2
48.1

47.3

48.3
47.2

47.6
46.7

46.4

46
44
41.8

42

41.0
40.3

40
38

40.4

40.2

300

500

39.7

10

50

100

200

passage size
Figure 6: Performance comparison of HiNT over different
passage sizes on MQ2007.

4.5
4.4

NDCG@10

52

Case Study

To better understand what can be learned by HiNT, here we conduct some case studies. For better visualization and analysis, we
simplified our model by replacing k-max pooling with max pooling
so that only the most significant signal is used in decision. Based
on the learned model, we pick up a query and a relevant document,
and plot all the signals E used in the hybrid decision model along
with the corresponding document content. Here each small bar in
E denotes a passage or accumulated signal at that position, with
the color corresponding to the signal strength. We highlight the
final selected signal with a red box and the corresponding passages
with green background color.
As shown in Figure 5, we can find two significantly different
decision strategies between a query and a document. In the first
case, the document is relevant to a query because of a strong passage signal. By checking the query and the document, we find that

Impact of Passage Size

Since we leverage the fixed-size sliding windows to segment a document into passages, we would like to study the effect of the passage
size on the ranking performance. Here we report the performance
results on MQ2007 with the passage size set as 10, 50, 100, 200,
300 and 500 words. As shown in Figure 6, the performance first
increases and then drops with the increase of the passage size. The
possible reason might be that too small passage size may hurt the
quality of passage signals (i.e., relevance matching between the
query and the passage) due to the information sparsity, while too
large passage size would produce limited number of coarse passagelevel signals which restrict the ability of the global decision layer.
Our results shows that the best performance can be achieved when
the passage size is set to 100 words on MQ2007.

383

Session 3D: Learning to Rank II

SIGIR’18, July 8-12, 2018, Ann Arbor, MI, USA

the query is “average annual salary in 1975” which conveys very
specific information need, and the passage at the 5-th position (i.e.,
the strongest signal) contains a table whose content can well address this information need. In the second case, the document is
relevant to a query because of a strong accumulated signal. Again
by checking the query and the document, we find that the query
is about the “cause of migraine headache” which is informational,
and the document is mostly relevant to this query with many passages addressing this problem (i.e., from the beginning to the 15-th
passage).
The two cases show that there are indeed quite diverse relevance
patterns in real-world retrieval scenario, and our HiNT model can
capture these diverse relevance patterns successfully.

5

processing systems. 545–552.
[10] Jiafeng Guo, Yixing Fan, Qingyao Ai, and W Bruce Croft. 2016. A deep relevance
matching model for ad-hoc retrieval. In CIKM. ACM, 55–64.
[11] Jiafeng Guo, Yixing Fan, Qingyao Ai, and W Bruce Croft. 2016. Semantic matching
by non-linear word transportation for information retrieval. In CIKM. ACM, 701–
710.
[12] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural
computation 9, 8 (1997), 1735–1780.
[13] Baotian Hu, Zhengdong Lu, Hang Li, and Qingcai Chen. 2014. Convolutional
neural network architectures for matching natural language sentences. In NIPS.
2042–2050.
[14] Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry
Heck. 2013. Learning deep structured semantic models for web search using
clickthrough data. In CIKM. ACM, 2333–2338.
[15] Thorsten Joachims. 2006. Training linear SVMs in linear time. In SIGKDD. ACM,
217–226.
[16] Marcin Kaszkiel and Justin Zobel. 1997. Passage retrieval revisited. In SIGIR,
Vol. 31. ACM, 178–185.
[17] Diederik Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 (2014).
[18] Robert Krovetz. 1993. Viewing morphology as an inference process. In SIGIR.
ACM, 191–202.
[19] Joon Ho Lee. 1997. Analyses of multiple evidence combination. In ACM SIGIR
Forum, Vol. 31. ACM, 267–276.
[20] Xiaoyong Liu and W. Bruce Croft. 2002. Passage retrieval based on language
models. In CIKM. 375–382.
[21] Yuanhua Lv and Cheng Xiang Zhai. 2009. Positional language models for information retrieval. In SIGIR. 299–306.
[22] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases and their compositionality. In
Advances in neural information processing systems. 3111–3119.
[23] Bhaskar Mitra and Nick Craswell. 2017. Neural Models for Information Retrieval.
arXiv preprint arXiv:1705.01509 (2017).
[24] Bhaskar Mitra, Fernando Diaz, and Nick Craswell. 2017. Learning to Match using
Local and Distributed Representations of Text for Web Search. In Proceedings of
the 26th International Conference on World Wide Web. International World Wide
Web Conferences Steering Committee, 1291–1299.
[25] Seung-Hoon Na. 2015. Two-stage document length normalization for information
retrieval. ACM Transactions on Information Systems (TOIS) 33, 2 (2015), 8.
[26] Liang Pang, Yanyan Lan, Jiafeng Guo, Jun Xu, and Xueqi Cheng. 2016. A study
of matchpyramid models on ad-hoc retrieval. arXiv preprint arXiv:1606.04648
(2016).
[27] Liang Pang, Yanyan Lan, Jiafeng Guo, Jun Xu, Jingfang Xu, and Xueqi Cheng.
2017. DeepRank: A New Deep Architecture for Relevance Ranking in Information
Retrieval. In CIKM. ACM, 257–266.
[28] Tao Qin, Tie-Yan Liu, Jun Xu, and Hang Li. 2010. LETOR: A benchmark collection
for research on learning to rank for information retrieval. Information Retrieval
13, 4 (2010), 346–374.
[29] Keith Rayner. 1998. Eye movements in reading and information processing: 20
years of research. Psychological bulletin 124, 3 (1998), 372.
[30] Stephen E Robertson and Steve Walker. 1994. Some simple effective approximations to the 2-poisson model for probabilistic weighted retrieval. In SIGIR.
Springer-Verlag New York, Inc., 232–241.
[31] Gerard Salton, James Allan, and Chris Buckley. 1993. Approaches to passage
retrieval in full text information systems. In SIGIR. ACM, 49–58.
[32] Mark Sanderson. 2010. Test collection based evaluation of information retrieval
systems. Now Publishers Inc.
[33] Tao Tao and ChengXiang Zhai. 2007. An exploration of proximity measures in
information retrieval. In SIGIR. ACM, 295–302.
[34] Shengxian Wan, Yanyan Lan, Jun Xu, Jiafeng Guo, Liang Pang, and Xueqi Cheng.
2016. Match-SRNN: Modeling the Recursive Matching Structure with Spatial
RNN. arXiv preprint arXiv:1604.04378 (2016).
[35] Mengqiu Wang and Luo Si. 2008. Discriminative probabilistic models for passage
based retrieval. In SIGIR. ACM, 419–426.
[36] Ho Chung Wu, Robert WP Luk, Kam-Fai Wong, and KL Kwok. 2007. A retrospective study of a hybrid document-context based retrieval model. Information
processing & management 43, 5 (2007), 1308–1331.
[37] Wensi Xi, Richard Xu-Rong, Christopher SG Khoo, and Ee-Peng Lim. 2001. Incorporating window-based passage-level evidence in document retrieval. Journal of
information science 27, 2 (2001), 73–80.
[38] Jun Xu and Hang Li. 2007. Adarank: a boosting algorithm for information
retrieval. In SIGIR. ACM, 391–398.
[39] Chengxiang Zhai and John Lafferty. 2001. A Study of Smoothing Methods for
Language Models Applied to Ad Hoc Information Retrieval. In SIGIR. ACM, New
York, NY, USA, 334–342. DOI:http://dx.doi.org/10.1145/383952.384019

CONCLUSIONS

In this paper, we have introduced a hierarchical neural matching
model to capture the diverse relevance patterns in ad-hoc retrieval.
The model consists of two components, namely local matching layer
and global decision layer. We employed deep neural network in
both layers to support high-quality relevance signal generation and
flexible relevance assessment strategies, respectively. Experimental
results on two benchmark datasets demonstrate that our model can
outperform all the baseline models in terms to all the evaluation
metrics, especially state-of-the-art learning to rank methods that
use manually designed features.
For future work, it would be interesting to try other implementation of the two components in HiNT, e.g., to employ some attentionbased neural network for the global decision layer. We would also
like to expand our model to accommodate features beyond relevance
matching, e.g. PageRank, to help improve the retrieval performance.

6

ACKNOWLEDGMENTS

This work was funded by the 973 Program of China under Grant
No. 2014CB340401, the National Natural Science Foundation of
China (NSFC) under Grants No. 61425016, 61472401, 61722211, and
20180290, the Youth Innovation Promotion Association CAS under Grants No. 20144310 and 2016102, and the National Key R&D
Program of China under Grants No. 2016QY02D0405.

REFERENCES
[1] Gianni Amati and Cornelis Joost Van Rijsbergen. 2002. Probabilistic models of
information retrieval based on measuring the divergence from randomness. ACM
Transactions on Information Systems (TOIS) 20, 4 (2002), 357–389.
[2] Michael Bendersky and Oren Kurland. 2008. Utilizing passage-based language
models for document retrieval. In European Conference on Information Retrieval.
Springer, 162–174.
[3] Christopher JC Burges. 2010. From ranknet to lambdarank to lambdamart: An
overview. Learning 11 (2010), 23–581.
[4] James P Callan. 1994. Passage-level evidence in document retrieval. In SIGIR.
Springer-Verlag New York, Inc., 302–310.
[5] James P Callan, W Bruce Croft, and John Broglio. 1995. TREC and TIPSTER
experiments with INQUERY. Information Processing & Management 31, 3 (1995),
327–343.
[6] Charles LA Clarke, Falk Scholer, and Ian Soboroff. 2005. The TREC 2005 Terabyte
Track.. In TREC.
[7] Hui Fang and ChengXiang Zhai. 2006. Semantic term matching in axiomatic
approaches to information retrieval. In SIGIR. ACM, 115–122.
[8] Yoav Freund, Raj Iyer, Robert E Schapire, and Yoram Singer. 2003. An efficient
boosting algorithm for combining preferences. Journal of machine learning
research 4, Nov (2003), 933–969.
[9] Alex Graves and Jürgen Schmidhuber. 2009. Offline handwriting recognition with
multidimensional recurrent neural networks. In Advances in neural information

384

