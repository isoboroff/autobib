Flex-BaseX: an XML Engine with a Flexible Extension of
XQuery Full-Text
Emanuele Panzeri, Gabriella Pasi
Department of Informatics, Systems and Communication (DISCo)
University of Milano-Bicocca
I-20126, Milano, Italy

{panzeri,pasi}@disco.unimib.it
ABSTRACT

databases forces users to be well aware of the underlying
structure; while a big deal of research has addressed the
problem of relaxing the evaluation of structural contraints,
none of the previously proposed extensions of XML query
languages allow users to directly specify flexible structural
constraints the evaluation of which produces weighted fragments. To this aim, the XQuery Full-Text[7] language extension proposed in [5] (based on a previous approach named
FleXy [3]) was the first proposal to introduce a set of flexible
constraints with an approximate matching, named Below
and Near. The proposed extension allows users to formulate queries where the relative position of important nodes
can be specified independently from an exact knowledge of
the underlying structure. The proposed flexible constraints
have been implemented with a conservative strategy, as an
extension of XQuery Full-Text, and they aim to offer an improved user-system interaction in XML retrieval, especially
to users unaware of the structure of the underlying repository (target users). The implemented extension gives also
a contribution to flexibility in processing XQuery queries
w.r.t. both content and structure evaluation.
As previously outlined, other contributions in the literature addressed the problem of querying XML documents
with a relaxed evaluation of structure-based constraints. For
example, in [1], [8] and [2], the authors proposed query relaxation techniques that provide an approximate structural
matching, producing a relevance score computation for each
element. The main, and most important, difference between
the cited approaches and the one proposed in [5] is that the
latter introduces for the users the possibility of explicitly expressing vague structural constraints, not imposing a clear
knowledge of the underlying structure, and also to specify
how the evaluation of the ad-hoc structural constraints has
to be performed.
The demo will present the implementation of the XQuery
Full-Text extension as formally defined in [5] on top of the
BaseX query engine [4], the first, to the best of our knowledge, to implement the W3C Full-Text extension for the
XQuery and XPath languages.
In the following section a brief introduction of the extension is presented, along with use cases and usage examples.

XML is the most used language for structuring data and
documents, besides being the de-facto standard for data exchange. Keyword based search has been implemented by
the XQuery Full-Text language extension, allowing document fragments to be retrieved and ranked via keywordbased matching in the Information Retrieval style. In this
demo the implementation of an XQuery extension allowing users to express their vague knowledge of the underlying XML structure is presented. The integration has been
performed on top of the BaseX query engine; the work, as
initially done in [6] as a proof-of-concept has been further
enhanced and extended.

Categories and Subject Descriptors
H.3.3 [Information Storage and Retrieval]: Search process;
Query formulation

General Terms
Algorithms, Experimentation

Keywords
XQuery Full-Text, Flexible Query Languages

1.

INTRODUCTION

The increasing number of XML document collections with
their heterogeneous and complex structures forces the users
to be aware of the exact document structure to be able
to formulate a query in the XQuery or XPath languages.
While such knowledge is usually available to users who define their own data with inherent structure, such knowledge
is not accessible to users who are dealing with collections
composed of documents gathered from several other different collections and, thus, having a highly variable structure.
The adoption of structured query models (such as XQuery)
to inquiry highly structured document repositories or XML

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
Copyright is held by the author/owner(s)
SIGIR’13, July 28–August 1, 2013, Dublin, Ireland.
Copyright 2013 ACM 978-1-4503-2034-4/13/07 ...$15.00.

2.

THE XQUERY FULL-TEXT EXTENSION

The Full-Text [7] language extension, as defined by the
W3C working group, is the first standardized extension of
the XQuery and the XPath languages adding an Information
Retrieval (IR) style to search and matching in XML textual
contents. Such extension introduces IR techniques (such as

1083

stemming, stop-words removal, etc) for keyword or phrase
searching in XML element contents; the Full-Text extensions
also introduce a score variable into the XQuery FLWOR
expressions, the score value is computed by the relevance
estimation of the element textual content.
On top of the XQuery Full-Text language, the FleXy extension introduces: (i) two new structure-based constraints
named Below and Near; and (ii) a new structural-score computed by the evaluation of the previous flexible constraints.
The newly introduced structural-score, in combination with
the Full-Text score, can then be used to obtain a user-defined
ranking of XML fragments with different aggregations: the
user may select the aggregation of the two scores to produce
a customized ranking and retrieval mechanism by using the
standard order-by clause in the XQuery language.
The FleXy language has been motivated by two main reasons, first of all to allow user to express vagueness while
querying highly structured documents: in such case the
user is able to exploit the, even partial, knowledge of the
documents structure also specifying the needed constraint
relaxation. The second motivation is to provide a double
scoring for the Full-Text and the structural constraint evaluation: given the different nature of the two scores, the user
should be able to handle the scores separately and aggregate them via a customized function. It is worth to notice
that the approach proposed in [5] for vagueness specification in structure-base constraints is the first approach that
allow users to define the amount of flexibility during the constraints evaluation, thus improving user’s interaction with
XML querying engines.
The FleXy language has been integrated into the BaseX
query engine to provide a first proof-of-concept implementation: the BaseX data structures have been adopted for
leveraging FleXy constraints; furthermore for this demo the
BaseX XQuery parser has been extended to fully support
both the Below and the Near constraints specification in all
XQuery FLOWR clauses.

2.1

Near and Below constraints

The Near and Below constraints have been defined in [5]
as structural axis like the XPath descendant, children axis.
The constraint Below is defined as an XPath axis and
its evaluation allow to match elements (called target nodes)
that are direct descendants of a node (called the context
node). Even if similar, for the same node set identified, to
the descendant axis, the Below constraint differs for the computation of a numeric score for each retrieved target-node.
The Below constraint is specified as: c/below::t, where c is
the context node, and t is the target node.
The axis Near allows to identify XML nodes connected
through any path to the context node. A threshold can be
used to define the maximum number of arcs between the
context node and the target node; nodes the distance of
which is more then n arcs are filtered out from the possible
results. The Near syntax is: c/near(n)::t; each retrieved
node has a score assigned. For further details refer to [5].

2.2

Figure 1: IMDb fragment example
In the following example, based on the document shown
in Fig. 1, the user is mainly interested in finding people
who acted in a movie entitled “Django Unchained", the user
is also interested, but at a lower level, also in other roles.
As visible from the following example the ranking (specified
with the order-by clause) is an average between the FullText score (the $FTscore variable) and the structural score
($STscore):
for $i score $FTscore structure-score $STscore in
person[descendant::act/near(4)::title[contains
(.,"Django Unchained")]]/child::name}
order by ($FTscore + $STscore) mod 2
return $i

The user is thus able to express vagueness in structurebased constrains and to define customized ranking algorithms that better satisfy his/her needs.

3.

CONCLUSIONS

This work presents the FleXy extension as implemented
on top of the BaseX [4] query engine: during the demo the
new constraints Below and Near, as well as the new system
user-defined ranking will be shown.
Custom user collections, previously indexed by the BaseX
system, can be used and subsequently queried by the users:
they will be able to formulate their own queries and evaluate
the results on-the-fly.

4.

REFERENCES

[1] S. Amer-Yahia, N. Koudas, A. Marian, D. Srivastava,
and D. Toman. Structure and Content Scoring for
XML. In VLDB ’05, pages 361–372, 2005.
[2] S. Cho and W.-T. Balke. Relaxing xml preference
queries for cooperative retrieval. In ICEIS, pages
160–171, 2009.
[3] E. Damiani, S. Marrara, and G. Pasi. A flexible
extension of XPath to improve XML querying. In
SIGIR’08, pages 849–850, 2008.
[4] C. Grün, S. Gath, A. Holupirek, and M. H. Scholl.
XQuery Full Text Implementation in BaseX. In XSym
’09, pages 114–128, 2009.
[5] E. Panzeri and G. Pasi. An Approach to Define
Flexible Structural Constraints in XQuery. In AMT
’12, pages 307–317, 2012.
[6] E. Panzeri and G. Pasi. A flexible extension of XQuery
Full-Text. In IIR ’13, 2013.
[7] W3C. XQuery/XPath FullText.
www.w3.org/TR/xpath-full-text-10, March 2011.
[8] C. Yu and H. V. Jagadish. Querying Complex
Structured Databases. In VLDB ’07, pages 1010–1021,
2007.

Customized ranking

As described in section 2.1 the FleXy extension introduces
a structural-score associated to the evaluation of the Below
and Near constraints: such score can be aggregated with
the Full-Text score to define a customized ranking algorithm
based on both the textual and the structural evaluation.

1084

