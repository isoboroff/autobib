What Can Pictures Tell Us About Web Pages?
Improving Document Search using Images
∗

Sergio Rodriguez-Vaamonde†
sergio.rodriguez@tecnalia.com
†

Lorenzo Torresani§
lorenzo@cs.dartmouth.edu

Tecnalia, Zamudio, Spain & University of the Basque Country, Bilbao, Spain
§
Dartmouth College, Hanover, NH, U.S.A.
¶
Microsoft Research Cambridge, United Kingdom

ABSTRACT

(a)

Traditional Web search engines do not use the images in
the HTML pages to find relevant documents for a given
query. Instead, they typically operate by computing a measure of agreement between the keywords provided by the
user and only the text portion of each page. In this paper we study whether the content of the pictures appearing
in a Web page can be used to enrich the semantic description of an HTML document and consequently boost the performance of a keyword-based search engine. We present a
Web-scalable system that exploits a pure text-based search
engine to find an initial set of candidate documents for a
given query. Then, the candidate set is reranked using semantic information extracted from the images contained in
the pages. The resulting system retains the computational
efficiency of traditional text-based search engines with only a
small additional storage cost needed to encode the visual information. We test our approach on the TREC 2009 Million
Query Track, where we show that our use of visual content
yields improvement in accuracies for two distinct text-based
search engines, including the system with the best reported
performance on this benchmark.
Categories and Subject Descriptors: H.3.3 [Information Storage and Retrieval]: Information Search and Retrieval
Keywords: Web Search, Ranking, Image Content

1.

Andrew Fitzgibbon¶
awf@microsoft.com

Text-based document search

Image-based
(c) document
reranking
1.

1.

ranking
list r

2.

(b)

3.

Text-based image search
& visual classifier learning
I +: positive
examples

I - : negative
examples

2.

3.

visual
classifier

Figure 1: Method overview: the query q is issued (a)
to a document search engine producing a ranked list r of
Web pages and (b) to a text-based image search engine
yielding positive image examples to learn a query-specific
visual classifier. Finally, (c) the visual classifier is used
to rerank the pages in the list r.

markup tags, but does not look at the pixels themselves.
The exclusive reliance on text-based technology to search the
Web is explained by the challenges posed by the handling
of image data: automatic image understanding is still today
computationally expensive and prone to mistakes.
In this paper we propose a novel document retrieval approach that uses the content of the pictures in the Web pages
to boost the accuracy of pure text-based search engines. At
a high-level we expect that, for example, for the query “Ferrari Formula 1”, users will judge documents containing pictures of Ferrari cars to be more relevant than pages with
unrelated images. Consequently our hope is that a search
system combining the textual information with the visual
information extracted from the pictures will yield improved
accuracy. While there is a large literature on combining text
and image data for image search, we know of no work that
attempts to improve document search using image content.
The closest work to ours is the approach of Yu et al. [7] who
demonstrate improved ranking by using simple image measures such as aspect ratio, size, and high-level features such
as blurriness. In contrast, we use a modern object recognition system to provide rich data on the image content.

INTRODUCTION

“A picture is worth a thousand words.” Despite this old
saying, modern Web search engines ignore the pictures in
HTML pages and retrieve documents merely by comparing
the query keywords with the text in the documents. Of
course this text includes the words in image captions and
∗This research was conducted while the first author was a
visiting student at Dartmouth College.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGIR’13, July 28–August 1, 2013, Dublin, Ireland.
Copyright 2013 ACM 978-1-4503-2034-4/13/07 ...$15.00.

849

2.

APPROACH OVERVIEW

r produced by text-search engine S. The vector x(q,i) includes several image-based features. In the next subsection
we present our features. In subsection 3.2 we describe how
these features are used to rerank the documents in r.

In order to design an image-based search engine that can
scale to Web-size databases we are posed with two fundamental challenges. First, the descriptor extracted from the
pictures must be semantically rich but also very compact so
that the overall size of the document is sufficiently small for
fast search in billions of pages. Second, we must devise a
way to efficiently translate the query keywords into a visual
model (i.e., an image classifier) that can be used to measure
the compatibility between the text query and the photos in
a Web page. We address the first requirement by utilizing
a compact attribute-based image descriptor—the classeme
vector [6]—which has been shown to yield accurate object
recognition even with simple linear classifiers, which are efficient to train and test. The second requirement is met by
learning “on the fly” the visual model associated to the query
keywords using as positive training examples the top image
results of a text-based image search engine, such as Google
Images or Bing Images. The visual classifier can then be
used together with the text-based techniques of traditional
Web search to measure the compatibility between the query
and the page content, now both visual as well as textual.
The architecture of our system is illustrated in Fig. 1.
Let D be the database of Web pages. In order to produce the list of relevant documents for an input query q, we
use a reranking strategy combining traditional text-retrieval
methods with the visual classifier learned for query q:

3.1

(a) The query q is provided as input to a text-based search
engine S operating on D to produce a ranking list r of
K candidate pages (Fig. 1(a)).
(b) In parallel, the query q is issued to a keyword-based image search engine (in this work we use the visual search
service of Bing Images). The top M image results I +
are used as positive examples to train a visual classifier
to recognize the query concept in images (Fig. 1(b)).
As negative training set I − , we use a fixed collection of
images representative of many object classes.
(c) The list of pages r is reranked (Fig. 1(c)) by taking into
account several image features including the classification scores produced by evaluating the visual classifier
on the pictures of the K candidate pages.
The intuition is that when the query represents a concept
that can be recognized in images, the learned visual classifier
can be applied to increase or decrease the relevancy of a
candidate page in the ranking list depending on whether the
document contains pictures exhibiting that visual concept.
Our system can perform efficient query-time learning and
testing of the visual classifier in large databases. This scalability stems from the small size of the classeme vector (only
333 bytes/image) and the use of a linear (i.e., fast to train
and test) classification model. Here we use a linear Support
Vector Machine (SVM) trained on M = 50 examples.

3.

The query-document features

The vector x(q,i) for query-document pair (q, i) comprises
the following 12 features.
(q,i)
Text features (x1,2 ): ‘relevance score’ and ‘ranking position’ of document i in the ranking list r produced by S for
query q. The ‘relevance score’ feature is a numerical value
indicating the relevancy of the document as estimated by S,
purely based on text. The ‘ranking position’ is the position
of i in the ranking list r. By including these two features we
leverage the high-accuracy of modern text-based search.
(q,i)
Visual metadata features (x3,4 ): ‘# linked images’
and ‘# valid images’. These attributes are used to describe
whether the document contains many images. Web pages
often include many small images corresponding to clipart,
icons and graphical separators. These images usually do not
convey semantic information. To remove such images from
consideration, we extract the classeme vector only from pictures having at least 100 pixels per side. The feature ‘#
valid images’ gives the total number of images in the page
for which the classeme descriptor was computed.
(q,i)
Query visualness features (x5,6 ): ‘visual classifier accuracy’ and ‘visual concept frequency’. These features are
dependent only on the query (i.e., they are constant for
all documents) and describe the ability of the visual classifier learned for query q to recognize that concept in images. In particular, ‘visual classifier accuracy’ is the 5-fold
cross-validation accuracy of the classifier trained on the examples retrieved by Bing Images for query q. While this
feature describes how reliably the classifier recognizes query
q in images, it does not convey how frequently this visual
concept is present in pictures of Web pages. This information is captured by ‘visual concept frequency’ which is the
fraction of times the visual classifier for query q returns a
positive score on images of the database D.
Intuitively, these two query visualness features provide the
reranker with an indication of the usefulness of employing
the visual classifier for query q to find relevant pages.
(q,i)
Visual content features (x7−12 ): ‘histogram of visual
scores’ and ‘document relevancy probability’.
(q,i)
The ‘histogram of visual scores’ is a 5-bin histogram (x7−11 )
representing the quantized distribution of the scores (i.e.,
the SVM outputs) produced by the visual classifier of query
q on the images of document i.
(q,i)
The ‘document relevancy probability’ (x12 ) is the posterior
probability that the document i is relevant for query q given
the observed classification scores of the images contained in
the page, i.e., p(i is relevant |s1 , . . . , sni ), where s1 , . . . , sni
are the binarized scores that the SVM for query q produces
on the ni (valid) images of document i. This probability is
computed via standard Bayes’s rule under the assumption
of conditional independence (the Naı̈ve Bayes assumption):

AN IMAGE-BASED MODEL FOR
DOCUMENT RERANKING

We now describe our image-based reranking model. We
use a query-relative representation of the documents: let
x(q,i) ∈ Rd be the feature vector describing the i-th document in the database D relative to query q. Given an
input query q, our approach enables real-time computation
of the vector x(q,i) for each document i in the ranking list

p(i is relevant |s1 , . . . , sni ) =
p(i is relevant )TP mi (1 − TP )ni −mi /p(s1 , . . . , sni ) (1)
where mi is the number of images of i having positive classification score while TP denotes the true positive rate of the
classifier, i.e., TP = p(su = 1|i is relevant ). The denomi-

850

nator in Eq. 1 can be evaluated via application of the sum
and product rules in terms of the prior, TP , and the false
positive rate (FP ). We assume that the rates TP , FP are
query-independent and we estimate them empirically over a
large number of labeled training queries.

3.2

p@30

S=UDMQ

48.2
48.3
53.2
64.5

38.8
38.7
32.5
40.5

S=Indri

Ranking w/ text only (S)
Our method w/ Ranking SVM
Our method w/ Random Forest
Our method w/ GBRT

27.7
27.8
31.6
37.3

27.7
27.3
23.4
27.2

Learning to rerank using visual content

Our objective is to learn a reranking function f : Rd → R
such that f (x(q,i) ) provides a numerical estimate of the final
relevancy of document i for query q, where i is one of the
pages in the list r retrieved by S. In order to avoid the computational cost of training the reranker at query-time, we
learn a query-independent function f : this function is trained
only once during an offline training stage, using a large
collection of labeled training examples for many different
queries. We denote with T = {(q1 , r1 , y1 ), . . . , (qN , rN , yN )}
the offline training set used to learn f , where rj is the sorted
ranking list of K documents produced by the text-based
search engine S for input query qj , i.e., rjk ∈ D denotes the
ID of the document ranked in the k-th position; the vector
yj contains the corresponding ground-truth relevance labels.
We use binary relevance labels with yjk = 1 denoting that
document rjk is relevant for query qj , and value 0 indicating
“non-relevant”. We denote with θ the learning parameters of
the function, i.e., f (x(q,i) ) = f (x(q,i) ; θ). In our experiments
we tested the following reranking models:

Table 1: Precision @ 10 and 30 on the TREC MQ09
benchmark using different ranking models. Top: search
engines based on UDMQ. Bottom: search engines based
on Indri. Our GBRT reranker using image features
achieves consistently the best accuracy and greatly outperforms the engines using text only (UDMQ and Indri).

As for the storage cost, our system requires saving the
classeme vectors of the valid images in each Web page. In
the dataset used for our experiments, each page contains on
average 1.44 valid images. Thus, the added storage cost due
to the use of images is less than 500 bytes per document,
which can be easily absorbed by modern retrieval systems.

5.

EXPERIMENTS

We evaluate our system on the ad-hoc retrieval benchmark of the TREC 2009 Million Query Track (MQ09) [3].
This benchmark is based on the “Category B” ClueWeb09
dataset [1] which includes roughly 50 million English pages
crawled from the Web. The publicly available distribution
of this dataset includes the original HTML pages collected
by the ClueWeb09 team in 2009, but not the images linked
in them. In order to run our image-based system on this collection, in September 2011 we attempted to download the
pictures linked in these documents. Unfortunately many of
the pages and images were no longer available on the Web.
Thus here we restrict our experiments only to the pages for
which we successfully downloaded all images linked in the
original document (this amounts to 41% of the pages).
To train and test our reranking system, we use the publicly
available MQ09 queries and human relevance judgements.In
all, judgements are available for 684 queries, with each query
receiving either 32 or 64 document assessments. The relevance values are “not relevant” (yjk = 0) or “relevant”
(yjk = 1). In order to meet the conditions for reusability of
the MQ09 topics and judgements [3], we chose as our textsearch engines S the UDMQAxQEWeb system [8], which
was one of the systems participating in the MQ09 competition. We refer to this system as UDMQ. The ranking lists
of UDMQ on the MQ09 queries are publicly available.
To test the ability of our method to work with different text-search systems S, we also present results with the
popular Indri search engine [5]. We generated the ranking
lists of Indri on the MQ09 queries by using its public batch
query service. Unlike UDMQ, Indri did not participate to
the MQ09 competition. Thus, while the estimate of the absolute accuracy of Indri on MQ09 may be unreliable, here we
use it just as a baseline to judge the relative improvement
produced by reranking its search results with our system.
For both engines, we generate the vector r by truncating
the ranking list at K = 200. We employ 10-fold cross validation over the queries, thus using in each run 9/10th of
the queries for training and the remaining 1/10-th for validation. Performance is measured as precision at 10 and
30 (denoted as statMPC@10 and statMPC@30) using the

• Ranking SVM. This algorithm [4] learns a linear model
of the features, i.e., f (x(q,i) ; θ) = θ T x(q,i) . The parameters θ are optimized to produce a ranking that preserves
as much as possible the ordering of the training examples,
i.e., such that ideally θ T x(qj ,k) > θ T x(qj ,l) ⇐⇒ yjk > yjl .
• Random Forest. This method learns a random forest [2] with each tree greedily optimized to predict the relevance labels yjk of the training examples. The resulting
hypothesis computes an average of the P independently
trained regression trees f (1) , . . . , f (P ) , i.e., f (x(q,i) ; θ) =
1 (p)
f (x(q,i) ). The P trees are diversified by considering
P
at each split only d0 < d randomly chosen features (we set
d0 to 10% of the number of features). The value of P is
selected via cross-validation.
• Gradient Boosted Regression Trees (GBRT). This
model also predicts by averaging the outputs of P regression trees. However, unlike in case of the random forest where the trees are independently learned, the GBRT
trees are trained in sequence to correct the current regression error (for further details see [9]).

4.

p@10
Ranking w/ text only (S)
Our method w/ Ranking SVM
Our method w/ Random Forest
Our method w/ GBRT

DISCUSSION OF COSTS

Although our implementation requires downloading the
images returned by the image search engine and then extracting the classeme vectors from them, in a real application scenario the classeme descriptors (which are queryindependent) would be precomputed at the time of the creation of the index by the image-search service. Then the
image and document search would be issued in parallel, and
the image service would return only the classeme vectors
for the image results (333 bytes per image). The computational cost of learning the query-specific visual classifier
on the classeme vectors is certainly of the same order as
ranking in existing text-based systems. Finally, testing the
visual classifier is also efficient: it takes less than one second
to evaluate a linear SVM on 1M classeme vectors.

851

UDMQ−based
Indri−based

70

60

S=UDMQ

statMPC10 (%)

50

S=Indri

S wins
GBRT wins
tie
S wins
GBRT wins
tie

% of
queries

median
gain in
p@10

median
visual
error

15.3
12.6
72.1
12.6
14.5
72.9

20.0
33.1
n/a
20.0
29.5
n/a

29.4
25.7
27.6
27.7
25.2
28.4

40

Table 2:

A comparison across queries between the
text-based engines and our GBRT image-based reranker.
Note that the “median visual error” (i.e., the crossvalidation error of the visual classifier) is higher for the
queries where S wins compared to the queries where our
approach wins: this suggests that our method does better when the query is more visual.

30

20

10

0

S

Our method:
text + visual
metadata

Our method:
all features except
query visualness

Our method:
all features

the reranker to determine whether the query is visually recognizable and to modulate accordingly the contribution of
the visual content features in the reranking function.
In Table 2 we report the percentage of queries for which
our image-based GBRT reranker provides a higher value of
prec@10 than S, i.e., “wins” over the text-based engine. Our
method and S are tied for roughly 72% of the queries, while
the number of times one wins over the other are fairly evenly
divided. However, in the cases where our system wins, it
gives a much higher gain in prec@10, compared to when S
wins (+33.1% vs +20% when S=UDMQ; +29.5% vs +20%
when S=Indri). It is also interesting to observe that the
cross-validation error of the visual classifier is lower for the
subset of queries where our system wins over S.

Figure 2: Precision @ 10 using different image features
with the GBRT reranker based on UDMQ (red) and Indri (yellow). Removing the visual content features (“text
+ visual metadata”) or the query visualness features
from our descriptor causes a large drop in performance.

“statistical evaluation method” [3] . We focus on these measures as our main goal is to improve the relevancy of the
documents in the top part of the ranking list.
In Table 1 we compare the accuracy of the text-based
search engines (UDMQ and Indri) to the different imagebased ranking models introduced in section 3.2. First, we
see that all image-based rerankers yield higher values of
statMPC@10 than the search engines using text only. The
GBRT reranker is by far the best, improving by over 33%
the precision of UDMQ, which achieved the highest accuracy among all search engines participating in the MQ09
competition. This clearly indicates that our image-based
features provide new and relevant information compared to
that captured by traditional text-based engines. Instead, no
significant gain is achieved in terms of statMPC@30. Empirically we found that our reranker tends to apply fairly small
displacements to the positions of documents in the original
ranking list. While these small rearrangements have a positive impact on the top-10 lists examined by statMPC@10,
they are too small to change sensibly the statMPC@30.
Next, we want to study which features contribute to the
statMPC@10 improvement. For this purpose we retrain the
GBRT model (our best performing model) using two different variants of our feature vector: 1) “text + visual meta(q,i)
data” (i.e., we use only the features x1−4 , which do not
capture the content of the images); 2) the vector “all fea(q,i)
tures except visualness” (i.e., we exclude only features x5,6 ,
which capture the document-independent visualness of the
query). The results are presented in Figure 2 using UDMQ
(red bars) and Indri (yellow bars) as text-retrieval models S.
We see that, although GBRT with the “text + visual metadata” descriptor achieves accuracy slightly superior to the
text-based search engines, the performance is not as good
as when our approach uses all features, including the visual
content. This suggests that despite the noisy nature of the
Bing training images, our visual classifier does capture information that is useful to predict whether a document is
relevant with respect to the query. Excluding the query visualness features from our descriptor also causes a drop in
accuracy. Intuitively, this happens as these features allow

6.

CONCLUSIONS

In this work we have studied the largely unexplored topic
of how to improve Web-document search using images. We
have demonstrated that by using modern object recognition
systems it is possible to extract useful semantic content from
the photos of a Web page and that this additional information improves the accuracy of state-of-the-art text-based retrieval systems. All this is achieved at the small cost of a
few additional hundred bytes of storage for each page.

7.

ACKNOWLEDGMENTS

This work was supported in part by Microsoft Research
and by NSF CAREER award IIS-0952943. SRV’s visit to
Dartmouth College was partially funded by the Basque Government under grant number IE11-316.

8.

REFERENCES

[1] Website. http://lemurproject.org/clueweb09.php/.
[2] L. Breiman. Random forests. Machine Learn., 45(1):5–32, 2001.
[3] B. Carterette, V. Pavlu, H. Fang, and E. Kanoulas. TREC
Million Query Track 2009 Overview. 2009.
[4] R. Herbrich, T. Graepel, and K. Obermayer. Large margin rank
boundaries for ordinal regression. In Advances in Large Margin
Classifiers, 2000.
[5] T. Strohman, D. Metzler, H. Turtle, and W. B. Croft. Indri: a
language-model based search engine for complex queries. In
Proc. of ICIA, 2005.
[6] L. Torresani, M. Szummer, and A. W. Fitzgibbon. Efficient
object category recognition using classemes. In ECCV, 2010.
[7] Q. Yu, S. Shi, Z. Li, J.-R. Wen, and W.-Y. Ma. Improve ranking
by using image information. In Proc. of ECIR, 2007.
[8] W. Zheng and H. Fang. Axiomatic Approaches to Information
Retrieval - TREC 2009 Million Query and Web Tracks. 2009.
[9] Z. Zheng, H. Zha, T. Zhang, O. Chapelle, K. Chen, and G. Sun.
A General Boosting Method and its Application to Learning
Ranking Functions for Web Search. In NIPS, 2007.

852

