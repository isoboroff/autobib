Automatic Feature Generation on Heterogeneous Graph
for Music Recommendation
Chun Guo

Xiaozhong Liu

School of Informatics and Computing
Indiana University Bloomington
Bloomington, IN, USA, 47405

School of Informatics and Computing
Indiana University Bloomington
Bloomington, IN, USA, 47405

chunguo@indiana.edu

liu237@indiana.edu

ABSTRACT

Actually, MSS generated user data present significant heterogeneity. Taking user-music relationship as an example, comment, bookmark, and listening history may potentially contribute to music recommendation in very different ways. Furthermore, user and music
can be implicitly related via more complex paths, e.g., user-playartist-perform-music. From this viewpoint, user-user, music-music
or user-music relationship can be much more complex than the
classical CF approach assumed.
In this paper, we propose a novel approach to address the music recommendation problem from the heterogeneous graph mining viewpoint, where 6 different types of nodes interact through
16 types of relationships. The recommendation problem, then, becomes a (supervised) random walk problem on the graph. Compared with earlier related studies, this study investigates the comprehensive relationships among different kinds of objects for music recommendation. Take [1] as an example, Bu et al., integrated
acoustic features and CF information by using hypergraph mining
approach. A number of hyperedges were proposed to address the
user-music relationship. However, this study only focused on usertag-music relationship (as a hyperedge), and other types of relations
were not explored.
As Figure 1 shows, in this study, the constructed heterogeneous
music graph is more complex than most existing graph mining studies, which challenges the classical approaches. For instance, Liu et
al., [5] and Lao & Cohen [4] used relatively simple heterogeneous
graph and manually generated meta-path features for scholarly recommendation, where each feature represents a ranking hypothesis.
However, we can hardly use this approach for this study because
of the complexity of the music graph schema. For example, if we
restrict the path length to 4 or smaller, 259 candidate meta-paths
between user and song nodes can be identified on this heterogeneous graph schema. With so many potential meta-paths, there is
no guarantee that manually selected meta-path collection can optimize the recommendation performance. In this pilot study, we
select a subset of meta-path features from the graph schema using
the training data. Then, learning to rank method is utilized to generate the music recommendation model. Results show that the new
method can significantly (p < 0.0001) enhance the recommendation performance.

Online music streaming services (MSS) experienced exponential
growth over the past decade. The giant MSS providers not only
built massive music collection with metadata, they also accumulated large amount of heterogeneous data generated from users,
e.g. listening history, comment, bookmark, and user generated
playlist. While various kinds of user data can potentially be used
to enhance the music recommendation performance, most existing
studies only focused on audio content features and collaborative
filtering approaches based on simple user listening history or music rating. In this paper, we propose a novel approach to solve the
music recommendation problem by means of heterogeneous graph
mining. Meta-path based features are automatically generated from
a content-rich heterogeneous graph schema with 6 types of nodes
and 16 types of relations. Meanwhile, we use learning-to-rank approach to integrate different features for music recommendation.
Experiment results show that the automatically generated graphical features significantly (p < 0.0001) enhance state-of-the-art
collaborative filtering algorithm.

Categories and Subject Descriptors
H.3.3 [Information Storage and Retrieval]: Information Search
and Retrieval

Keywords
Music Recommendation; Meta-Path; Feature Generation; Feature
Selection

1.

INTRODUCTION

In the past decade, online music streaming services (MSS), i.e.,
Pandora and Spotify, experienced exponential growth. The sheer
volume of music collection makes music recommendation increasingly important and the related algorithms are well-documented.
In prior studies, most algorithms employed content-based model
(CBM) and collaborative filtering (CF) [8]. The former one focuses on acoustic/signal features extracted from audio content, and
the latter one investigates music rating and user listening history.

2.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from Permissions@acm.org.
SIGIR’15, August 09 - 13, 2015, Santiago, Chile.
c 2015 ACM. ISBN 978-1-4503-3621-5/15/08 ...$15.00.
DOI: http://dx.doi.org/10.1145/2766462.2767808.

LITERATURE REVIEW

Most previous music recommendation algorithms can be divided
into two categories: content-based model (CBM) and collaborative
filtering (CF).
Content-based music recommendation typically focuses on extracting acoustic features from music audio content. Then, it recommends music items based on the similarity between new items
and items in the user’s listening history. For example, Logan [6] in-

807

opinion, e.g., like/dislike about the music objects, or share their
own emotions about the song. These all reveal user’s preference
about a candidate music track in terms of different relationships.
Heterogeneous graph mining provides us a good way of modeling
these relationships for recommendation tasks.
On this directed heterogeneous graph, G = (V, E), there are an
object (node) type mapping function τ : V → A and a link type
mapping function φ : E → R, where each object v ∈ V belongs
to one particular object type τ (v) ∈ A, each link e ∈ E belongs
to a particular relation type φ(e) ∈ R, and if two links belong to
the same relation type, the two links share the same starting object
type as well as the ending object type. The types of nodes and
edges used in our study are presented in Table 1.

Figure 1: Heterogeneous Music Graph

Table 1: Nodes and Relations in Heterogeneous Music Graph

vestigated Mel-frequency Cepstral Coefficients (MFCCs) as acoustic features and utilized Earth-Mover’s distance to measure the similarity between songs for recommendation. More recently, Wang
and Wang [10] used deep leaning techniques which perform feature learning from audio signals and music recommendation in a
unified framework. Audio analysis extracts low-level acoustic features about music entities. However, they are not what causal users
usually relate to in their music exploration.
Unlike CBM, collaborative filtering approach depends on usermusic relationship, which has been proved to be one of the most effective recommendation techniques. There are two basic approaches
towards collaborative filtering, memory-based and model-based.
Memory-based CF algorithms derive item-to-item (item-based CF)
or user-to-user (user-based CF) similarity from user rating/feedback
matrices. Item-based CF recommends items similar to the user’s favorite items, and user-based CF recommends items liked by similar
users. Model-based CF typically utilizes matrix factorization techniques to predict user rating on his/her unseen items. CF approach
has been proved to outperform other recommendation algorithms
in KDD-Cup 2011 Yahoo! Music Recommendation challenge [2].
More recently, online music services have attracted large groups
of users and collected rich context-based music information, e.g.
comments, collaborative tags, user listening history, etc. Very heterogeneous relationships among different kinds of objects provide
exciting opportunities for researchers to propose novel music recommendation algorithms. Symeonidis et al. [9], for example, employed collaborative tags from a social music website and proposed
a personalized music recommendation system by applying latent
semantic analysis and dimensionality reduction with the higherorder SVD technique to the user-tag-item tensor. Most previous
context-based music recommendation systems use a single source
of contextual information (e.g., music tags). In this paper, we propose an approach that takes advantage of the rich heterogeneous
contextual information harvested from social music community.

3.
3.1

Node/Relation
Ar
Al
S
P
G
U
cat

Ar → G
pIn

Ar → Al
cat

Al → G
i

Al → S
pIn

Ar → S
i

P →S
m
U →P
pl

U → Ar
U
U
U
U
U

pl

→
c
→
c
→
c
→
c
→

S
Ar
Al
S
P

b

U → Al
b

U →S
b

U →P

Description
Artist
Album
Music track
Playlist
Genre
User
Artist categorized as a genre
Artist performs in an album
Album categorized as a genre
Album includes a music track
Artist performs in a music track
Playlist includes a music track
User makes a playlist
User plays music track from an artist
User plays a music track
User comments an artist
User comments an album
User comments a music track
User comments a playlist
User bookmarks an album
User bookmarks a music track
User bookmarks a playlist

Edge weights on the heterogeneous graph represent the transition
pl

probability from one node to another. For instance, w(ui → arj )
represents the probability that user ui plays the music from artist
arj . For any node v on the graph,
P let Ov represents the set of its
outgoing links. Then we have e∈Ov ,φ(e)=Rk w(e) = 1, where
Rk is a particular relation type on the graph schema. That is to say,
for any node on the graph, the sum of weights on the same type of
outgoing links equals 1. For most relation types, weight is modeled as 1 divided by the number of its outgoing links of the same
type. For example, an artist might be labeled with multiple genres. The weight of the link from artist ai to genre gj is defined as
cat
cat
1
, where d(ai → G) is the total number
w(ai → gj ) =
cat

RESEARCH METHODS

d(ai → G)

of genres that ai is labeled with. For relation types that involve play
counts and comments, weight modeling is different. For example,
the weight of the link from user ui to music track sj is defined

Graph Construction

Numerous studies have shown that one of the most effective
channels for dissemination/recommendation of information is the
network of community [3]. In this study, we verify this hypothesis
for music recommendation by investigating very heterogeneous relationships among different kinds of objects. For example, for the
case of Xiami1 , users can bookmark a song and come back to it
later. Users can also comment on different music entities (artist, album, song, etc.), which gives them a way to publicly express their

pl

as w(ui → sj ) =

pl

d(ui →sj )
pl

d(ui →S)

pl

, where d(ui → sj ) represents the

number of times that sj appears in user ui ’s listening history and
pl

d(ui → S) represents the total play counts (for all the music tracks
in the collection) in ui ’s listening history.

3.2

1
One of the largest online music streaming services (MSS) in
China. Xiami.com has more than 20 million of active users.

Recommendation via Random Walk on Heterogeneous Graph

In this study, we take a ranking approach for music recommendation. For each query node on the graph, we retrieve a number of

808

(R)

the corresponding set of nodes Vi
that belong to the result node
(Q)
(Q)
type ȦR and are directly connected to vi via a set of edges Ei
of relation type RQ . In order to evaluate the performance of the
(Q)
proposed approach, for vi
∈ V (Q) , we randomly remove p%
(Q)
of edges in Ei from the graph. Different meta-path based ranking features and learning to rank model can be used to recommend
(Q)
nodes originally linked to vi via these removed edges. Mean
average precision (MAP), normalized discounted cumulative gain
(NDCG), and Precision@10 are used as evaluation metrics. An importance score of 0-4 is assigned to each ground-truth query-result
node pair for NDCG calculation. For music track recommendation
task, if a music track is played more than 4 times by the query user,
it is assigned an importance score of 4. A play count of 3 or 4 has
an importance of 3. A music track played twice is assigned to 2,
and once to 1. Score is 0 if the track is never played by query user.
[Learning to Rank model training]: The ranking performance
of each meta-path is evaluated, and only the top t performing metapaths are used to train the learning to rank model Φ(P 1 , P 2 ..., P t ).
The dataset D used to train and test Φ is defined as D1 ∪ D2 ∪
· · · ∪ Dt , where Di (1≤i≤t) is made up of the top k ranked items
returned by P i . Each instance in D is a (t + 1) dimension tuple
(~
x, y), where y is the ground-truth relevance judgment and the ith
element of ~
x is the ranking score derived from P i or 0 if this item
is not found by P i . The learning to rank model is evaluated using
5-fold cross-validation.

candidate nodes and make recommendations based on their ranking
scores. The ranking scores of each candidate node come from the
meta-path based ranking features automatically generated from the
heterogeneous graph schema. On the heterogeneous music graph,
meta-path defines how the query node and result node are connected, which is an abstraction of the many path instances that follow the same pattern [5]. For the same recommendation task (e.g.
recommend music tracks to a user), there are usually multiple posc
sible meta-paths on the heterogeneous graph. For example, U → S
is a simple meta-path, which denotes all the music tracks (S) that
the user (U) have commented on. A meta-path can be represented
as:
Rl
Rl
R1
R2
ȦQ −→
Ȧ1 −→
Ȧ2 . . . −→
Ȧl−1 −→
ȦR
, where ȦQ is the query node type, and ȦR is the recommended
node type. In this study, ȦQ is the user node, and ȦR is the music
node. When we change the type of ȦQ and ȦR , this method can
be generalized to other recommendation tasks, e.g., recommending
music to a playlist.
Previous research used manually selected meta-paths to solve
different data mining tasks. However, there is no guarantee these
selected meta-paths are the best performing ones. In this study,
we exhaust all possible meta-paths from the heterogeneous graph
schema (graph schema mining) and evaluate their performance individually. The first step is to derive the schema GS of the heterogeneous music graph G. On GS (as Figure 1 shows), each node is
a unique object type on the original graph G, and each edge represents a unique relation type on G. Let GS = (VS , ES ). Then we
have |VS | = |A| and |ES | = |R|. Given the query node vQ and
result node vR on GS , a depth first search is performed on GS to locate all paths following the pattern (vQ , e1 , v1 , e2 , v2 , . . . , ek , vR ),
where the length of this path k is always equal or smaller than a
threshold l (maximum length of a potential meta-path). When l is
large, more meta-paths will be generated, but the meta-path based
features can be more noisy. For example, to perform the music
track recommendation task, vQ is the user node and vR is the music node. On this graph schema, when l = 3, we have 49 features,
and when l = 4, a total number of 259 features can be extracted.
After the meta-paths are identified from the graph schema, we
define meta-path based ranking functions and the result nodes with
the highest ranking scores are recommended. In this paper, we
adopt a random walk based ranking function to calculate the ranking score for each candidate. We define the random walk based
relevance measure between vi and vj as:
s(vi , vj |P) =

X
t=vi

4.

4.1

Data and Preprocessing

In order to build the heterogeneous music graph, we collected
metadata and user generated data from xiami.com, a popular music social website in China. The website stores user-contributed
and editor-curated metadata about different music entities (artist,
album, song, etc.). It also allows users to build personal profile,
record their listening history, create customized playlist, and socialize with other users within the community. For this study, the experiment dataset contains 56,055 artists, 43,086 albums, 1,233,651
songs, 633 genres, 677,275 users, and 305,916 playlists. As Table
1 shows, we also collected a large number of relationships among
different objects. There are 15,929,369 edges in total created on
the graph.
For evaluation, we randomly selected 1,000 users from the dataset
whose listening history contains more than 50 different songs. We
set up this filter to make sure there are enough training/test instances for each user. Then 40% of the “play” relationships originating from each of the 1000 selected users are removed for evaluation purpose.
We trained two learning to rank models, one with the top 10
performing meta-paths of length 4, and the other one with the top
10 performing meta-paths with length ≤ 3. For each meta-path,
the top 1000 ranked results are kept to build the dataset for model
training and test.

RW (t)

vj |P

, where t is a tour from vi to vj following a specific metapath P, and RW (t) is the random walk probability of the tour
t. Suppose t = (vi , vi+1 , . . . , vi+k , . . . , vj ), the random walk
Q
probability is then RW (t) = k=j−i−1
w(vi+k , vi+k+1 ), where
k=0
w(vi+k , vi+k+1 ) is the weight of edge vi+k → vi+k+1 . Alternatively, we can create a ranking model Φ(P 1 , P 2 ..., P t ), where P i
(1 ≤ i ≤ t) is a meta-path based ranking feature. For this study,
the ranking function Φ is derived using Coordinate Ascent [7], a
learning to rank method.

3.3

EXPERIMENT

In this section, we test the performance of the proposed approach
on music track recommendation.

4.2

Result

We compare our algorithm with item-to-item based CF algorithm
with jaccard similarity, which has been proved useful in [8].
Table 2 lists the evaluation results for different ranking algorithms. The first 10 rows list the 5 best-performing features whose
length ≤ 3 and length = 4, ordered by MAP@10 decreasing. The

Evaluation Method and Ranking Model
Training

[Evaluation method]: For evaluation purpose, we randomly select a set of nodes V (Q) belonging to the query node type ȦQ
(Q)
(∀v ∈ V (Q) , τ (v) = ȦQ ). Then for vi
∈ V (Q) , we locate

pl

pIn

i

best performing meta-path is U → Ar → Al → S ? . This meta-

809

Table 2: Evaluation Results
Path
MAP@10
pl
pIn
i
L≤3
U → Ar → Al → S ?
0.0024
b
i
L≤3
U → Al → S ?
0.0016
pl
pIn
L≤3
U → Ar → S ?
0.0015
c
i
L≤3
U → Al → S ?
0.0013
pIn
pIn
b
L≤3
U → Al ← Ar → S ?
0.0007
pl
pIn
pIn
i
L=4
U → S ← Ar → Al → S ?
0.0021
pl
pIn
pIn
i
L=4
U → S ← Al ← Ar → S ?
0.0017
pIn
pl
pl
b
L=4
U → Al ← Ar ← U → S ?
0.0013
pl
pIn
pl
c
L=4
U → Ar → S ← U → S ?
0.0009
pl
pIn
pl
b
L=4
U → Ar → S ← U → S ?
0.0009
CF
item similarity
0.0044
L2R
length≤3
0.0024
L2R
length=4
0.0022
L2R
length≤3 + CF
0.0069***
L2R
length=4 + CF
0.0047*
*** Significant p <0.0001,** Significant p <0.001, * Significant p <0.01

MAP@100

MAP@300

MAP

NDCG@10

NDCG@100

NDCG@300

NDCG

P@10

0.009

0.0145

0.0254

0.0852

0.0863

0.0944

0.1904

0.1135

0.0027

0.0029

0.003

0.0414

0.0211

0.0156

0.016

0.0648

0.0058

0.0092

0.0154

0.042

0.0461

0.0537

0.1179

0.0614

0.0021

0.0023

0.0023

0.0553

0.0236

0.0142

0.014

0.0733

0.0018

0.0026

0.0037

0.0227

0.0187

0.0201

0.0354

0.0372

0.008

0.0131

0.0268

0.0717

0.0747

0.083

0.2063

0.0963

0.0069

0.0116

0.0242

0.0676

0.0642

0.0731

0.1937

0.0932

0.0036

0.0057

0.0131

0.0551

0.0476

0.0522

0.1513

0.0747

0.0034

0.0058

0.0137

0.0538

0.0526

0.0551

0.1554

0.0797

0.0034
0.0085
0.009
0.0084
0.0162***
0.0118***

0.0057
0.0101
0.0144
0.0144
0.0215***
0.017***

0.014
0.0122
0.0235
0.0296
0.0314***
0.0314***

0.0511
0.1489
0.0887
0.0845
0.2084***
0.162**

0.0525
0.0735
0.0856
0.0842
0.1261***
0.0986***

0.0557
0.0595
0.0925
0.0957
0.1154***
0.0981***

0.1587
0.0919
0.168
0.2206
0.1955***
0.2269***

0.075
0.1919
0.1172
0.116
0.2593***
0.2048**

path means we recommend music tracks from the albums released
by artists in the user’s listening history. Although it cannot outperform item-based CF algorithm for MAP@10, as rank goes up
to 100, it gains higher MAP and NDCG scores. This finding indicates that single meta-path based ranking function can discover
high quality music tracks based on the user’s listening history. The
pl

pIn

pIn

best performing meta-path of length 4 is U → S ← Ar →
i
Al → S ? . It is not the best performing one across all meta-paths
within length 4, but it still outperforms the second best meta-path
within length 3. It means longer meta-paths are as competitive as,
if not better than, the shorter ones. Note that the best performing
meta-path of length 4 also outperforms the baseline collaborative
filtering algorithm for MAP@300.
Collaborative filtering only takes advantage of user’s listening/rating
behavior. However, on the heterogeneous graph, music tracks are
pl

connected to the user via other types of relations as well (e.g. U →
pIn

i

Ar → Al → S ? ). Meta-path based ranking functions can enhance collaborative filtering performance by providing additional
information. To test this hypothesis, we tried two sets of experiments combining both meta-path features and the collaborative filtering feature. The last 2 rows of Table 2 show the results for the
combination of CF ranking and rankings from the top 10 metapaths with length ≤ 3 and length = 4. Both combined recommendation models significantly outperform the baseline CF algorithm
and the meta-path ranking functions. It is also worth noting that the
combination with meta-paths of length 4 does not perform as well
as the one with shorter meta-paths. A good selection of meta-paths
is critical for the performance.

5.

ANALYSIS AND CONCLUSION

In this study, we propose a heterogeneous graph mining approach
for music recommendation. Supervised random walk is used for
music ranking (graph mining), and the meta-path based ranking
features are identified from graph schema (schema mining). The
best-performed features are used to train the recommendation model
via learning to rank. Evaluation results show that: 1. for single
meta-path ranking function, CF method works better for top ranked
musics, but when rank is larger than 100, some meta-paths outperform CF approach. 2. After we applied learning to rank method,
the recommendation performance significantly outperform all other
methods, including the CF algorithm. 3. Some nodes and relationships can be more significant than others for music recommendation. For instance, the top ranked meta-paths are more likely to

810

be related to artist (Ar), album (Al) and user (U ), which can be
important to locate the important music on the graph.
There are a couple of directions of research arising from this
work which should be pursued. First, we will investigate more sophisticated feature selection methods to enhance the recommendation performance. Second, by using the constructed graph, we will
explore other recommendation tasks, e.g., recommending music to
playlist or recommending existing playlists to a user.

6.

REFERENCES

[1] J. Bu, S. Tan, C. Chen, C. Wang, H. Wu, L. Zhang, and X. He. Music
recommendation by unified hypergraph: combining social media
information and music content. In Proceedings of the international
conference on Multimedia, pages 391–400. ACM, 2010.
[2] G. Dror, Y. Labs, N. Koenigstein, Y. Koren, and M. Weimer. The
yahoo! music dataset and kddcup’11. In JMLR Workshop and
Conference Proceedings: Proceedings of KDD Cup 2011
Competition, pages 3–18, 2012.
[3] H. Kautz, B. Selman, and M. Shah. Referral web: combining social
networks and collaborative filtering. Communications of the ACM,
40(3):63–65, 1997.
[4] N. Lao and W. W. Cohen. Relational retrieval using a combination of
path-constrained random walks. Machine Learning, 81(1):53–67,
Oct. 2010.
[5] X. Liu, Y. Yu, C. Guo, and Y. Sun. Meta-path-based ranking with
pseudo relevance feedback on heterogeneous graph for citation
recommendation. In Proceedings of the 23rd ACM International
Conference on Conference on Information and Knowledge
Management, CIKM ’14, pages 121–130, New York, NY, USA,
2014. ACM.
[6] B. Logan. Music recommendation from song sets. In 5th
International Society for Music Information Retrieval, pages
425–428, 2004.
[7] D. Metzler and W. B. Croft. Linear feature-based models for
information retrieval. Information Retrieval, 10(3):257–274, 2007.
[8] Y. Song, S. Dixon, and M. Pearce. A survey of music
recommendation systems and future perspectives. In 9th
International Symposium on Computer Music Modeling and
Retrieval, June 2012.
[9] P. Symeonidis, M. M. Ruxanda, A. Nanopoulos, and
Y. Manolopoulos. Ternary semantic analysis of social tags for
personalized music recommendation. In 11th International Society
for Music Information Retrieval, pages 219–224, 2008.
[10] X. Wang and Y. Wang. Improving content-based and hybrid music
recommendation using deep learning. In Proceedings of the ACM
International Conference on Multimedia, MM ’14, pages 627–636,
New York, NY, USA, 2014. ACM.

