Web Page Publication Time Detection and its Application
for Page Rank
Zhumin Chen1,2 , Jun Ma1 , Chaoran Cui1 , Hongxing Rui2 , Shaomang Huang1 ,
1

School of Computer Science & Technology, Shandong University, Jinan, 250101, China
2
School of Mathematics, Shandong University, Jinan, 250100, China

{chenzhumin,majun,hxrui}@sdu.edu.cn
ABSTRACT

rank, which considers the relevance between the text of a page and
a query, the P-time, as well as the important score of the page.

Publication Time (P-time for short) of Web pages is often required
in many application areas. In this paper, we address the issue of
P-time detection and its application for page rank. We first propose
an approach to extract P-time for a page with explicit P-time displayed on its body. We then present a method to infer P-time for
a page without P-time. We further introduce a temporal sensitive
page rank model using P-time. Experiments demonstrate that our
methods outperform the baseline methods significantly.

2. P-TIME DETECTION
For a given page, we first try to extract P-time from its body. If
the P-time can not be found, we then infer it.
P-Time Extraction (PTE)
We present a machine learning approach to extract P-time unit
from the body of a page which has explicit P-time. We incorporate
only general linguistic and format information as the features for
the machine learning model. We mainly use following information.
(1) Linguistic information: Number of numerical characters, Number of alphabetic characters, Number of all characters.
(2) Position information: Position of Unit before the page title,
Position of Unit after the page title, Position of Unit from bottom
of the page, Width and Height of Unit in the page.
(3) Format information: Temporal expression format, Font size,
Font weight, Font family, Alignment: center, left, right, and justify.
(4) Tag information: H1, H2, ..., H6, DIR, A, U, BR, Class name
(‘time’, ‘date’), etc.
With above information, we create 88 binary features used by the
model of Support Vector Machine (SVM) to identify the P-time.
P-time Inference (PTI)
We infer P-time based on link and text information of a page and
its neighbors. For a page, we get the span of its P-time according
to the link relation with its neighbors. A page’s P-time is later than
its outlink pages’ P-time and earlier than its inlink pages’ P-time.
For a page pi with P-time pti , its outlink pages are represented as
{pO1 , pO2 , ..., pOe } with P-time {pt1O , pt2O , ..., pteO } respectively, and its
inlink pages are denoted by {pI1 , pI2 , ..., pIw } with P-time {pt1I , pt2I , ...,
ptwI } respectively. So, pti belongs to the time span T S i as follows:
pti ∈ T S i = [MAX{pt1O , pt2O , ..., pteO }, MIN{pt1I , pt2I , ..., ptwI }] (1)
Then, we infer its exact P-time in terms of the text similarity
between its content and those neighbors content whose P-time belongs to the span. Many pages are published by some sites to report
an event when it happens. The reverse case, pages describing the
same event may be published at the same time. Thus, the intuition
is that highly relevant pages may share the same P-time. For two
pages: pi with unknown P-time pti , and p j with known P-time pt j ,
we infer pti in terms of pt j and the text similarity of pi and p j :
p(pt j |pi ) ∝ simscore(pi , p j ) if pt j ∈ T S i
(2)
P-time of the page with maximum simscore is estimated as pti .

Categories and Subject Descriptors: H.3.3 [Information Search
and Retrieval]: Search process
General Terms: Algorithms, Experimentation, Performance
Keywords: temporal information detection, publication time extraction, publication time inference, page rank

1.

INTRODUCTION

Publication time (P-time) is the inception (creation) time when
a Web page was published. In most cases, P-time is a precise temporal expression with a limited number of fixed formats. P-time is
very useful temporal information in many applications [1].
As P-time detection, a method to extract P-time of a news story
was discussed in [2]. However, the news story is not a page but a
search result record returned from a search engine. Web document
was dated based on its own Last-Modified value, the average LastModified value of its incoming links, outgoing links and assets [3].
A document corpus was first grouped into time partitions, and then
a document’s timestamp is determined by the partition with maximum similarity score to it [4]. However, almost all literatures do
not use the format and link information of Web pages. This leads
to performance decreasing for P-time detection.
As P-time application, a model was presented to measure the
distribution of documents retrieved in response to a query over the
time domain in order to create a temporal profile for a query [5].
Implicitly year qualified queries were investigated in [6]. This kind
of query does not actually contain a year, but yet a user may have
implicitly formulated the query with a specific year in mind.
In this paper, we propose an approach to automatically detect Ptime of Web pages and a temporal sensitive page rank model using
P-time. A page may have explicit P-time in its HTML body or
not. For the former, we present a domain and language independent
machine learning method to extract the P-time. For the latter, we
infer the P-time based on the link and text similarity relations with
its neighbors. As an application, we introduce a model for page

3. P-TIME DETECTION EXPERIMENTS
P-time Extraction Experiments
We annotated P-time of 2500 pages in English and 2500 pages
in Chinese. We compared six approaches. The first fives methods,

Copyright is held by the author/owner(s).
SIGIR’10, July 19–23, 2010, Geneva, Switzerland.
ACM 978-1-60558-896-4/10/07.

859

Precision

1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

Table 1: NDCG at Position n for GCorpus
Methods
PRE
PRT
PRP
LLT

LaT
FfT
PTE Methods

BhT

Methods
PRE
PRT
PRP

PTESVM

The total number of pages

N@3
0.706
0.762
0.792

N@4
0.692
0.771
0.798

N@5
0.695
0.772
0.802

N@1
0.478
0.571
0.599

N@2
0.472
0.621
0.673

N@3
0.501
0.673
0.734

N@4
0.508
0.669
0.731

N@5
0.524
0.691
0.740

PTIB PTI1 PTI2

rank(i) = α ∗ sim(i, q) + β ∗ f (i) ∗ pagerank(i)
(3)
where sim(i, q) is the cosine similarity between i and q, pagerank(i)
is the importance score of i, and we set α = β = 0.5. f (i) is a time
based weight function and its value depends on the P-time of i.
D(C)−D(i)

0

1−3

4−6

7 − 9 10 − 12 13 − 15

time distance range (days)

(4)
f (i) = DR xu
where DR denotes the decay rate of a page’s importance over time.
We set DR = 0.5. D(C) is current time, D(i) is the P-time of i, and
D(C) − D(i) is the time gap in days. xu , which denotes the sensitive
degree of a query to time, can be dynamically tuned in terms of the
distribution of q over time from query log of a search engine.

> 16

Figure 2: Results of P-time inference methods.
represented as FLT, LLT, LaT, FfT and BhT, are baseline methods
and utilize the first time, the last time, the latest time, the first time
before title, the first time behind title in a page as its P-time respectively. The last method, PTESVM , is ours. Precision, the fraction of
extracted P-time that agrees with the annotated P-time, is used to
evaluate PTE results.
Figure 1 shows the results. Our approach significantly outperforms these baseline methods. It seems that use of only linguistic
or position information is not enough for extracting P-time eﬀectively. Our approach is eﬀective since it makes full use of not only
linguistic information but also various format information. As expected, the performance of FLT is much better than that of LLT, and
BhT achieves the best performance among these baseline methods.
This is because P-time often locates in the front part of pages, especially following titles. A small number of English authors write
P-time before the page tile, while none of Chinese authors write
P-time before the page tile. Thus, FfT gets the lowest performance.
P-time Inference Experiment
We collected 11,000 pages with a span of 40 days and annotated
the P-time. We then randomly selected 500 pages and inferred their
P-time. The rest of pages were grouped into 40 partitions according to the P-time. We define an evaluation measure time_distance,
which is the time gap between the inferred P-time and the annotated P-time in days. The first method, PTIB , uses the date of the
partition with maximum similarity score as the inferred P-time [4].
The second, PTI1 , is ours, except that the similarity is computed
between a page and each partition. The third method, PTI2 , is ours.
Experiment result is shown in Figure 2. Both our approaches
surpass the baseline method significantly. This is because our approaches use both link and text information to improve the eﬀectiveness and eﬃciency of PTI. The performance of PTI1 is better
than that of PTI2 . The reason may be that a partition, which is
merged using all titles of pages which belong to a certain date, contains more noisy information than a page title.

4.

N@2
0.741
0.761
0.813

Table 2: NDCG at Position n for YCorpus
FLT

Figure 1: Precision of P-time extraction methods.
330
300
270
240
210
180
150
120
90
60
30
0

N@1
0.752
0.772
0.789

5. RANK EXPERIMENTS WITH P-TIME
We issued 20 queries to Google and Yahoo! Search, and collected top 20 results for each query, denoted by GCorpus and YCorpus. And, we recruited four experts to judge the result rating. Normalized Discount Cumulative Gain (NDCG) was used to evaluate
the results [7]. The first method, PRE , ranks results in the original
order returned by a search engine. The second, PRT , ranks results
taking the linear combination of text similarity, temporal information and page importance [8]. The last method, PRP , is ours.
We list the results in Table 1 and Table 2. We can see that PRP
achieves the best performance for both GCorpus and YCorpus. PRP
and PRT both outperform PRE . It is clear that methods using Ptime are better than that does not. In addition, PRE on GCorpus
is superior to that on YCorpus. This may reflect the fact that the
performance of Google is better than that of Yahoo! Search. Note
that the NDCG values of all methods are very high because we only
collected top 20 relevant results returned by the search engine.

6. ACKNOWLEDGMENTS
This work is supported by the Natural Science Foundation of China
(60970047), the Key Science-Technology Project of Shandong Province
(2007GG10001002, 2008GG10001026) and Independent Innovation Foundation of Shandong University.

7. REFERENCES
[1] Omar Alonso, Michael Gertz, and Ricardo Baeza-Yates. On the value of
temporal information in information retrieval. SIGIR Forum, 41(2):35–41, 2007.
[2] Yiyao Lu, Weiyi Meng, and et. al. Automatic extraction of publication time
from news search results. In ICDEW’06, page 50, 2006.
[3] Sérgio Nunes, Cristina Ribeiro, and Gabriel David. Using neighbors to date web
documents. In Proceedings of the WIDM’07, pages 129–136. ACM, 2007.
[4] Nattiya Kanhabua and Kjetil Nørvåg. Using temporal language models for
document dating. In ECML PKDD’09, pages 738–741. Springer-Verlag, 2009.
[5] Rosie Jones and Fernando Diaz. Temporal profiles of queries. ACM
Transactions on Information Systems, 25(3):14, 2007.
[6] Donald Metzler, Rosie Jones, Fuchun Peng, and Ruiqiang Zhang. Improving
search relevance for implicitly temporal queries. In SIGIR’09, pages 700–701.
ACM, 2009.
[7] M.A. Najork, H. Zaragoza, and M.J. Taylor. Hits on the web: How does it
compare? In SIGIR’07, pages 471–478, 2007.
[8] Peiquan Jin, Jianlong Lian, Xujian Zhao, and Shouhong Wan. Tise: A temporal
search engine for web contents. In IITA’08, volume 3, pages 220–224, 2008.

PAGE RANK WITH P-TIME

Many queries imply users’ intention associated with time. We
propose an approach to rank pages considering their text content,
temporal information (i.e. P-time in this paper), and page importance. Our hypothesis is that the text similarity of a page to a query
does not change over time, while its importance changes over time.
For a query q, the rank score of the page i is computed as follow:

860

