Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

An Accurate, Efficient, and Scalable Approach to Channel
Matching in Smart TVs
Jiwon Hong

Sang-Wook Kim

Mina Rho

Hanyang University
Seoul, Korea
nowiz@hanyang.ac.kr

Hanyang University
Seoul, Korea
wook@hanyang.ac.kr

Hanyang University
Seoul, Korea
minarho@hanyang.ac.kr

YoonHee Choi

Yoonsik Tak

Samsung Electronics
Suwon, Korea
ndollar.choi@samsung.com

Samsung Electronics
Suwon, Korea
ys.tak@samsung.com

ABSTRACT
Smart TVs are rapidly replacing conventional TVs. In a number of
countries, set-top boxes (STB) are widely used to relay TV channels
to smart TVs. In such cases, smart TVs cannot identify which TV
channel they are receiving. This situation makes it challenging for
smart TVs to provide their users with a variety of personalized services, such as context-aware services and recommendation services.
In this paper, we introduce our TV channel matching system that
resolves such problems. We propose strategies for scaling-out the
matching system and improving its accuracy.

CCS CONCEPTS
• Information systems → Image search; • Computing methodologies → Visual content-based indexing and retrieval; • Applied
computing → Consumer products;

KEYWORDS
Context awareness; distributed indexing; image retrieval; smart TV;
TV channel matching

1

INTRODUCTION

Smart TVs are rapidly replacing conventional TVs. A smart TV
can provide a variety of services that utilize the information on
the TV programs that the viewers are watching. With such information, a smart TV can provide context-aware services [6], such
as information related to particular scenes (e.g., cast information,
phone numbers, locations, recipes, links to the Wikipedia, or product information) and parental controls using the age rating of the
TV program. It is also possible to analyze watching patterns and
preferred programs of users in order to provide various recommendation services [4].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGIR ’17, August 07-11, 2017, Shinjuku, Tokyo, Japan
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Association for Computing Machinery.
ACM ISBN 978-1-4503-5022-8/17/08. . . $15.00
https://doi.org/10.1145/3077136.3080708

When a smart TV receives conventional TV channels directly
from antennas, cables, or satellite dishes, the TV programs that viewers are watching are recognized by the smart TV. This is because
the user operates the smart TV to control TV channels. However,
in many countries, the use of a set-top box (STB) for receiving TV
channels is quite popular. When using STBs, a user operates the
STB to control TV channels, and the smart TV functions just as a
display to show the video delivered from the STB. In this case, the
smart TV itself does not know which channel the user is watching,
and thus cannot provide those services that utilize the information
on the TV channels or programs.
In many cases, a smart TV has an internet connection. We can
identify the TV program a user is watching by querying outside
sources through the internet. This is possible if an outside source
(a server) stores and indexes information on TV programs by using
video images broadcasted from TV stations. A smart TV can query
the server with the images provided by the STB. Given the images,
the server searches for their matching images from the index and
returns the information of the matched TV program. This process
resolves the limitations of STBs for providing context-aware services. In this paper, we propose a TV channel matching system
that finds an image from the TV station that is best matched to the
image from the smart TV.
The proposed system requires high scalability since the server
receives queries from a large number of smart TVs and stores many
TV programs. In this paper, we propose a distributed indexing
approach to achieve the scalability by distributing hash tables over
a number of machines for locality-sensitive hashing (LSH) [3].
The main contributions of this work are as follows. First, we
propose a framework that could provide context-aware services
and recommendation services in smart TVs with STBs. Second, we
implement the proposed system in the distributed environment.
Third, we propose strategies to improve both the accuracy and the
performance of the matching process. Fourth, we verify the accuracy, efficiency, and scalability of the proposed matching system
via extensive experiments.

2 TV CHANNEL MATCHING SYSTEM
2.1 System Overview
Our TV channel matching system consists of a server, in which
the information of the TV channels is stored, and clients that run
inside the smart TVs. Figure 1 outlines the framework of the TV

1025

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

TV Sta�on

250

Indexing
Component

(6)

(4)

(5)

(7)

Querying
Component

(2)

Query Processor

Capturing
Component

Server

Frequency

(3)

(1)

Capturing
Component
Service Component

(8)

150
100
50

Service Component

0

Service Component

Client

Value

Figure 2: A value distribution from a dimension.

Figure 1: A TV channel matching system.

We use LSH in order to index local features that are extracted
from the images. LSH is an efficient method that maximizes the
possibility that similar items could be binned in the same hash
bucket. It is a hashing technique that can solve approximate knearest neighbor problems in high dimensional space.
We use the LSH method proposed in [3], which is known simple
and very fast. The hash function maps each of the items that are
represented in the Hamming space, and creates a bit array of length
K. LSH creates L hash functions and the corresponding L hash tables
from the hash family. LSH inserts the items to all of the L hash
tables and searches such L hash tables for query items, resulting in
the search complexity of O(L).
The proposed system stores the local features of each image in
the LSH tables, along with source video ID and its frame offset. In
the searching process, the system calculates hash values for the
local features of the query image, and retrieves the IDs of all source
videos and their offsets in the corresponding hash buckets. Once
the system retrieves candidate local features, it takes a vote from
each candidate and determines the video frame to be matched to
the query image by aggregating all the votes as follows:
Õ Õ Õ
arg max
vote(q, f , t)
(1)

channel matching system, which operates as follows: (1) the capturing component in the server captures the images that have been
broadcasted from TV stations; (2) the indexing component stores the
images captured; (3) the capturing component in the client captures
the images that the smart TV has received; (4) the querying component sends to the server the images captured; (5) the query processor
receives the query images and searches for the most similar images
to them among the images that have been stored in the indexing
component; (6) the query processor sends to the client the channel
information of the image retrieved; (7) the querying component
conveys the channel information to the service components; (8)
the service components delivers the services based on the channel
information.

2.2

200

Requirements

The TV channel matching system should satisfy the following two
requirements: similarity-based matching and scalability.
2.2.1 Similarity-based matching. It is possible that the images
captured in the client could be different from those stored in the
server. For example, the captured image in the client might be a
few frames ahead/behind that in the server. Thus, similarity-based
matching should be performed in order to handle such situations.
In addition, an image that has been received through an STB might
have undergone either the addition of overlay such as navigation
bar and volume control or the adjustment in the scale of the image.
The images should be matched despite these circumstances.

v ∈V

q ∈F Q f ∈Fv t ∈T

1, LSH (q, t) = LSH (f , t)
(2)
0,
otherwise
Here, Q is the query image; V is the collection of the images indexed;
Fv is a set of local features of image v; T is a set of L LSH tables.
LSH (q, t) is a hash value of feature q in table t. The image with
a majority of votes is considered to be most similar to the query
image, as in Equation 1.
In addition, we consider the images in close offsets with the same
video ID to be the same in voting. In this case, Fv includes local
features that are extracted from several frames of the previous and
next images of v, in addition to those in image v. In this case, we
can ascertain the video ID and the approximate offset of similar or
same images of the query image.
vote(q, f , t) =

2.2.2 Scalability. The TV channel matching system should be
able to index several hundreds of channels. In addition, it should
be able to process up to hundreds of thousands of queries from
smart TVs within an area that shares an identical TV channel list.
Consequently, the memory space requirement for the index would
be excessively large for a server. In addition, a large number of
queries need to be processed within a second. It is infeasible to
make these requirements accomplished by a single machine. Therefore, the indexing component should be scaled-out by a number of
machines.

3.2



Improvements

3.2.1 Data-aware hash functions. A decent hash function minimizes hash collisions between two different input items by distributing the output as even as possible within a given output range.
However, an LSH has the objective to preserve locality between
items, which makes the skew in the input data to be reflected in the
output. More specifically, if there are multiple similar items in the
input data, those items are required to have the same hash output.
The values in each dimension of local feature descriptors that
have been extracted from TV programs are not uniformly distributed. Figure 2 shows the value distribution of a dimension in all
SURF descriptors from the dataset used in our research. In Figure 2,
values vary in a wide range, but the distribution shows a very high

3 INDEXING COMPONENT
3.1 Basic Indexing Strategy
The proposed system searches for the most similar images to a
query image by using a local feature extraction method that extracts
local features from the interesting points in the images. Speeded-up
robust features (SURF) [2] and oriented FAST and rotated BRIEF
(ORB) [7] have been widely applied to search for nearest neighbors
of an image, by taking into account image distortions such as the
changes in scale and noises.

1026

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

and narrow peak around the mode. The hash function would be
significantly affected by this skew in the input accordingly.
We remedy this problem by redesigning LSH functions to fit
the data distribution [1]. We use a probability density function
(PDF) that fits the data distribution to sample random bits instead.
To accomplish this, we select a dimension from the input data
uniformly at random to make sure that each dimension has almost
the same number of sampled bits. After deciding the dimension of
the sample bit, we select a random position of the sample bit using
the PDF of the corresponding dimension. By taking this procedure,
we can significantly reduce the chance of selecting less-informative
sample bits.

Load Balancer
Query Distribu�on
Querying
Node

…

Indexing Node

…

Indexing
Nodes

2nd Level Hashing
Indexing Node

Indexing Node

Indexing Component

Figure 3: The distributed indexing.

3.2.2 Multi-query voting. If the accuracy p of a query satisfies
p > 0.5, aggregating the results from multiple queries achieves
the better accuracy than that of a single query [5]. We utilize this
property to improve the accuracy of our proposed system. This
improvement may require additional time of several milliseconds.
Despite that the queries for multiple frames cause increased latency,
a latency of less than a second may not cause the users to feel
uncomfortable.
Following is the accuracy Accv (n) of the voting with n frames:
⌊n/2⌋
Õ n 
Accv (n) =
p n−m (1 − p)m
(3)
m
m=0

Considering the number of queries that the TV channel matching
system deals with, it is infeasible to process all the queries in a
single machine (see Section 2.2.2). Our proposed system adopts
multiple query processing nodes to process queries in a more timeefficient manner. Figure 3 shows the node structure of the proposed
distributed system. For each query, a query node will generate
multiple subqueries for the indexing nodes since each query consists
of multiple local features of a captured image.

4 EXPERIMENTS
4.1 Experimental Setup

For example, if the accuracy of a query with a single frame is 80%,
the accuracy of a 3-frame vote would be 90%. Accordingly, the
accuracy of the TV channel matching system would be greatly
improved with multi-frame voting. The number of frames required
may differ with the accuracy of each query and the target accuracy.
In order to improve the accuracy of the TV channel matching
system, we use the 3-frame vote, which can maximize the accuracy
without requiring users too patient.

3.3

Querying
Node

Querying
Nodes

Querying
Node

A TV program dataset was built for the experiments. Several hundred TV programs have been collected from multiple TV channels
broadcasted in a country. Queries were randomly selected from the
TV channels without replacement. In our experiments, we measured the accuracy and the performance. The accuracy is measured
by the proportion of successful matches. A successful match is defined as the retrieved nearest neighbor that belongs to the same
frameset where the query image resides. We used 30 neighboring
frames of the query frame as the frameset. The performance is
measured by the number of queries processed per second (QPS).

Distributed Indexing

The indexing component should be able to simultaneously index
images from channels and process several hundred thousands of
queries from smart TVs. Such process could be better performed
in the distributed system architecture. Our distributed indexing
stores and indexes efficiently a large amount of data by using a
distributed key-value storage, which distributes queries to multiple
query-processing nodes.
Disk-based indexing provides relatively low performance, which
could affect adversely the overall performance of the TV channel
matching system. For this reason, in-memory indexing is used in
this work. While in-memory indexing performs better in speed, it
suffers from low storage capacity when comparison is made with
disk-based indexing. In order to overcome such low storage capacity,
multiple storage nodes are also used in our framework.
LSH is a hash-based indexing. L LSH tables are disjoint with each
other; 2K hash buckets in each table are also disjoint with each other.
These properties guarantee that each table or bucket can be stored
and searched independently without using information from other
tables or buckets. Furthermore, each hash bucket is small enough
to be stored in a single node, so that the buckets can be distributed
successfully in separate nodes. We also use a second-level hashing
to store each bucket of the LSH tables in parallel.

4.2

Parameter Settings

It is imperative to find proper parameter settings for the system
since the parameters affect both the accuracy and the performance
of matching. We tried to find the best parameter setting. First, we
analyzed the accuracy and the performance with various numbers
of hash tables (L) and hash bits (K). Figure 4 shows the results.
Each bar in the graph represents the results obtained from various
combinations of L and K. In Figures 4(a) and 4(c), either high L
or high K increases the accuracy. However, the performance falls
sharply when both L and K increase at the same time (Figures 4(b)
and 4(d)). It is apparent that the accuracy and the performance show
a trade-off relationship.
Notably, the accuracy increases continuously as K increases.
However, for a high K value, the accuracy rather decreases slightly.
The problem here is that, with a very high K value, even sufficiently
similar features have different hash values, so they do not qualify
as candidates.
For a successful TV channel matching system, performance is
also a critical consideration. We can thus use K and L values that
show the highest performance with an acceptable level of accuracy.

1027

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Accuracy

0.7
0.6

50

0.5
0.4
0.3

K=128 K=256 K=512 K=1024 K=2048 K=4096
K=64
K=1024

1

K=128
K=2048

K=256
K=4096

K=512

0

0.8

K=64

60

K=128

50

K=256

0.6

40

K=512

QPS

0.7
0.5
0.4
0.3

100000

K=2048
K=4096

80000

10

0.1
0

K=1024

30
20

0.2

L=1

L=2

L=4

0

L=8

L=1

L=2

L=4

L=8

Figure 4: The accuracy and the performance with various
number of hash tables L and hash bits K.

0.6
0.4

60

K=64

K=128

K=256

Base

K=512

Data-Aware

0

Data-Aware

QPS

0.4
0.2

L=4

L=8

K=64

K=128

K=256

Base

100

Data-Aware

80
60

8

10

12

14

40

5
L=1

L=2

L=4

L=8

CONCLUSIONS

Smart TVs are unable to identify the TV program the users are
watching when the TV channel is relayed through STBs. In this
paper, we proposed a TV channel matching system that resolves
the STB problem. Through extensive experiments, we verified that
our proposed system can be applied to real-world situations in
terms of accuracy and performance. First, we determined proper
parameter settings for our proposed system. Second, we proved
that our strategies on the indexing components can improve the
accuracy of the matching. Finally, we demonstrated that the TV
channel matching system can scale-out with distributed indexing
approach.

Data-Aware Hash Functions

In order to evaluate the effectiveness, we compared the accuracy
and the performance of our LSH with data-aware hash functions
with the method in [3] by using different number of hash tables
and sampled bits.
Figure 5 shows the accuracy and the performance of each LSH
function with different K and L values. For Figures 5(a), 5(b), 5(c),
and 5(d), each bar shows an average value of the results. As shown
in Figures 5(a) and 5(b), the data-aware hash functions show significantly improved accuracy than the original [3] when more informative sample bits are selected. As expected, the accuracy drops from
lower K values (K ≥ 256), compared with the previous experiments.
In Figures 5(b) and 5(d), the difference in the performance of the
LSH functions is negligible. It turned out that our approach only
affects the accuracy, without affecting the performance.
All of the following experiments were performed with the proposed data-aware hash functions. We used K = 128 and L = 2
as the parameters, which showed sufficiently high accuracy and
performance.

4.4

6

In Figure 6, the performance is linearly increasing with respect
to the number of nodes. We thus confirmed that our proposed
TV channel matching system scales-out well in the distributed
environment.

K=512

Figure 5: The accuracy and the performance of [3] and dataaware hash functions.

4.3

4

Figure 6: The performance with varying nodes.

120

0

L=2

2

Nodes

20

L=1

0

40

(d)

0.6

0

Base

20

1

40000
20000

80

0.2

0.8

Accuracy

100

60000

0

(b)120
x 10000

Data-Aware

0.8

0

(c)

Base

QPS

1

x 10000

Accuracy

(a)

Scalability

In this experiment, we verify that our distributed indexing approach
is sufficiently scalable, so that the TV channel matching system
could be applied to the real-world situation. In order to show the
scalability, we measured the performance of the system by varying
the number of nodes in the distributed environment.

K=64 K=128 K=256 K=512 K=1024 K=2048 K=4096

(d) 70
x 10000

K=64

0.9

Accuracy

4.5

30

10

0.1

(c)

40

20

0.2
0

single-query approach. Notably, it is even higher than the expected
accuracy shown in Equation 3.

L=1
L=2
L=4
L=8

60

QPS

0.8

(b) 70
L=1
L=2
L=4
L=8

QPS

0.9

x 10000

(a) 1

6

ACKNOWLEDGMENTS

This research was supported by the 2017 NRF Grant (No. NRF2017R1A2B3004581). We thank Byung-Moon Moon, Kyo-Sung Jeong,
and Taehoon Kim who helped us with extensive experiments. It
should be noted that the motivation and the initial idea have settled
down during our joint-research with Samsung Electronics. SangWook Kim is the corresponding author of this paper.

REFERENCES
[1] A. Andoni and I. P. Razenshteyn. Optimal data-dependent hashing for approximate
near neighbors. In Proc. ACM STOC, pages 793–801, 2015.
[2] H. Bay et al. Speeded-up robust features (SURF). CVIU, 110(3):346–359, 2008.
[3] A. Gionis, P. Indyk, and R. Motwani. Similarity search in high dimensions via
hashing. In Proc. VLDB, pages 518–529, 1999.
[4] H. Hong and D. Lee. A personalized refinement technique for semantic multimedia
content search in smart TV. IEEE CE, 61(4):581–587, 2015.
[5] L. Lam and C. Y. Suen. Application of majority voting to pattern recognition: an
analysis of its behavior and performance. IEEE SMCA, 27(5):553–568, 1997.
[6] W.-P. Lee, C. Kaoli, and J.-Y. Huang. A smart tv system with body-gesture control,
tag-based rating and context-aware recommendation. KBS, 56:167–178, 2014.
[7] E. Rublee et al. ORB: an efficient alternative to SIFT or SURF. In Proc. ICCV, pages
2564–2571, 2011.

Multi-Query Voting

In this experiment, we verified the effectiveness of the multi-query
voting strategy with the parameter values that were determined
from the previous experiments. The number of queries in the voting
was set as 3.
The 3-query voting showed 98.7% accuracy, which is a significant improvement by 8.6%, compared with the 90.1% accuracy of a

1028

