Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Event Recommendation based on Graph Random Walking and
History Preference Reranking
Shenghao Liu, Bang Wang and Minghua Xu∗
Huzhong University of Science and Technology (HUST), Wuhan, China
{shenghao liu,wangbang,xuminghua}@hust.edu.cn

ABSTRACT

which normally has not been embedded into a social network
framework, recommending events in EBSNs has posed many
new challenges.
In a typical EBSN, a user can join multiple online groups
and attend many oﬄine events, showing diﬀerent online and
oﬄine relations. On the other hand, a social event has its
unique temporal and spatial characteristics in terms of its
time and location attributes. Furthermore, an event cannot
be actually consumed or evaluated before its commencement,
which raises the issue of new event cold-start problem. To address the challenges, some event recommendation algorithms
have been proposed based on impacting factor analysis for
content-based ﬁltering [3, 5, 7, 9]. Recently, some graphbased event recommendation algorithms have drawn a lot of
research interests[1, 4, 6, 8].
In graph-based event recommendation, entities in a EBSN,
such as users, groups, events, hosts and etc., are represented as graph nodes, while their relations are used as edges.
A heterogeneous graph structure is widely adopted: Entities
are ﬁrst grouped according to their types, such as user and
event groups. Two nodes in two diﬀerent groups may be connected through an edge, if some relation exists in between
them. For example, a user attended an event, then an edge is
drawn in between them. However, no edges are drawn in between nodes of the same group [1, 6, 8]. Random walking is
performed on a constructed graph to obtain converged probabilities of each node, and the event probabilities are used
to rank and recommend events to users. Due to its better
capability to describe the diverse relations in EBSNs, graphbased event recommendation has been shown to achieve better performance, compared with the traditional content and
collaborative ﬁltering recommendation algorithms.
In this paper, we ﬁrst propose to construct a hybrid graph
structure for event recommendation. Similar to the heterogeneous graph construction, we also apply node grouping for
some entities to ﬁrst form node groups. We note that the
heterogeneous graph structure [1, 6, 8] only exploits explicit
relations in an EBSN, which may produce many dangling
nodes. Although a dangling node is not disconnected to the
whole graph, it only contains edges to only one type of nodes. Such dangling nodes impact on the graph connectivity
property as well as the random walk. For example, the nodes of event attributes including its type, cost, time and
location only connect to the event nodes, never connecting
to other group nodes, which may deviate the random walk
to undesirable routes. Therefore, we propose to use these attributes to ﬁrst compute the similarities among events and
further interconnect the event nodes in its group based on

Event recommendation has become an important issue in
event-based social networks (EBSN). In this paper, we study
how to exploit diverse relations in an EBSN as well as individual history preferences to recommend preferred events.
We ﬁrst construct a hybrid graph consisting of diﬀerent types of nodes to represent available entities in an EBSN. The
graph uses explicit relations as edges to connect nodes of
diﬀerent types; while transferring implicit relations of event
attributes to interconnect the event nodes. After executing
the graph random walking, we obtain the candidate events
with high convergency probabilities. We next extract a user preference from his attended events to further compute
his interest similarities to his candidate events. The recommended event list is then obtained by combining the two
similarity scores. Data sets from a real EBSN are used to
examine the proposed scheme, and experiment results validate its superiority over peer schemes.

KEYWORDS
Event recommendation, cold-start problem, graph-based
random walking, event-based social networks

1

INTRODUCTION

Recently, event-based social networks (EBSNs), such as
Meetup and Douban Event 1 , have been becoming widely
developed, which not only oﬀer a convenient platform to
announce various social events, but also construct a complicated social network among users. How to eﬃciently recommend appropriate events to users in EBSNs has become
a hot topic in both academia and industry [2, 4]. Unlike
item recommendation such as recommending books, movies,
∗

Shenghao Liu and Bang Wang are with the School of Electronic Information and Communications, HUST; Minghua Xu is with the School
of Journalism and Information Communication, HUST. This work is
supported in part by National Natural Science Foundation of China
(Grant No: 61371141) and National Social Science Foundation of China (Grant No: 14CXW018).
1
Meetup: www.meetup.com; Douban Event: www.douban.com
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for proﬁt or commercial advantage
and that copies bear this notice and the full citation on the ﬁrst page.
Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists,
requires prior speciﬁc permission and/or a fee. Request permissions
from permissions@acm.org.
SIGIR’17, August 7–11, 2017, Shinjuku, Tokyo, Japan.
© 2017 ACM. 978-1-4503-5022-8/17/08. . . $15.00
DOI: http://dx.doi.org/10.1145/3077136.3080663

861

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Group

their similarities. As such, we construct a hybrid graph that
exploits both explicit and implicit relations among entities
to perform random walking. Furthermore, we notice that
although the graph approach is able to describe the complicated relations among diﬀerent entities, it may not well
prioritize diﬀerent types of relations. We next propose to use
a content-based reranking algorithm to obtain the ﬁnal event
recommendation list from the candidate events selected by
the graph random walking. We have crawled data sets from
the famous Chinese EBSN, Douban Event, for two typical
cities, Beijing and Shanghai. Our experiments show that the
proposed scheme can achieve better recommendation results
compared with the peer schemes.

Subject

G1

S1

G2

S2

Time

Region

Event

H1
Host

E1
H2
E2

User

U1

E1
E3

Transfer

U2
E2

U3

E3
Type

Event

Join/Include

Participate

Stamped

Stamped

Stamped

Similar

Cost

Hosted
Attribute

2 RESEARCH METHOD
2.1 Hybrid Graph Construction

Figure 1: Illustration of hybrid graph construction.

The essential entities of an EBSN include the users, hosts and events, yet the total available entities are actually
platform dependent. In this paper, we focus on the event
recommendation for a very popular Chinese EBSN, Douban
Event, where the available entities include: users U , events
E, groups G, hosts H, tags T . Furthermore, an event is also
described by the following attributes: event time Em , event location El , event cost Ec and event type Et . These in
total nine entities can be used as nodes for graph construction. However, some entities take real numbers, e.g., Em and
Ec ; while some entities may take too many discrete values,
e.g., T and El . Therefore, we need to ﬁrst preprocess these
entities for reducing graph complexity.
The basic idea of our preprocessing is to use segmentation
or aggregation to reduce the parameter value space. For entity event time Em , we divide the continuous time line into
seven week days plus one another ’Everyday’, i.e., from Monday to Sunday and Everyday, as we argue that people daily
life often takes some periodic feature. For entity event cost
Ec , we partition its value into ﬁve ranges for normal expense
habits, i.e., free charge, 1 ∼ 200, 201 ∼ 500, 501 ∼ 1000,
and above 1000 Chinese Yuan. For event locations El , we
use fewer administrative regions Er each to represent for one
event location. Most of event locations also include the administrative region. If an event location does not contain
the region information, we use the nearest neighbor algorithm to include it into the region with the shortest Euclidean
distance to the region center. For tags T , we cluster them into fewer subjects by using the unweighted pair-group method
with arithmetic mean (UPGMA). In each iteration, we group
the most similar two clusters or tags into a new one. The iteration terminates, until the required number of clusters has
achieved. Note that the intersection of any two tag clusters
(i.e., subjects) is an empty set.
After the preprocessing, we have the following entities as
graph nodes, namely, U , E, G, H, subjects S, Ec , Em , Et
and event regions Er . Like those traditional heterogeneous
graph construction, we ﬁrst use explicit relations to obtain
explicit edges in between two nodes. Note that all explicit
edges are undirected. For example, a user U 1 joins an online

group G1, then an undirected edge links U 1 and G1; U 1
attended an oﬄine event E1, an edge exists between them.
Note that after tag clustering, each group, host and event can
be stamped by one or more subjects, given its tags appearing
in how many subjects.
In this paper, we proposed a new hybrid graph type which
diﬀers from the heterogeneous graph in that we convert the
explicit relations between an event to its attributes into some
implicit relations in between events. As shown in Fig. 1,
the right big box illustrates the explicit edges between event
node and its attribute nodes, where no edge exists in between event nodes and also no edge exists in between each
type of attribute nodes. If we use this box to replace the
small organge box, then a heterogeneous graph is constructed. However, such a heterogeneous graph contains too many
dangling event attribute nodes, each of which only connects
to event nodes. We observe from our experiments that such
dangling nodes not only impact on the graph connectivity,
but also often lead to deviated routes from event nodes to
its attribute nodes in the random walking.
For our hybrid construction, we propose the following relation conversion: Let AEEc , AEEm , AEEr and AEEt denote
the adjacency matrices of events and event attribute nodes.
Let AE denote the concatenation matrix of these matrices,
where each row represents the attribute vector of one event
node. We compute the cosine similarity between two event
−
→ −
→
−
→
nodes by sim(Ei , Ej ) = cos( A i , A j ), where A i is the ith
row vector of AE . For each event Ei , we select its top K
most similar events to establish K directed implicit edges
each from Ei to one of its these similar event nodes. In this
paper, we set K = 100. Note that since the sets of similar
events may be diﬀerent of two diﬀerent events, so we use
directed implicit edges. Fig. 1 illustrates the constructed hybrid graph, where only event nodes contain directed implicit
edges in between the event nodes.

862

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Random Walking with Restart

2.2

which may lead to the new event cold-start problem. Considering these, we next rerank events based on the user history
preference to obtain the ﬁnal recommendation list.
For each event e, we use ⃗e to denote its concatenated
feature vector consisting of its four attribute vectors plus its
subject vector, i.e., ⃗e = (⃗ec , ⃗em , ⃗er , ⃗et , ⃗es ). Let ⃗
u denote the
preference vector of user u, which has the same structure as
⃗e. Let Euold denote the set of old events that a user u has
attended. We use the pairwise sum of the attended event
features
∑ to obtain a user history preference vector, that is,
⃗
u = j∈E old ⃗e(j) .
u
We compute the cosine similarity between ⃗
u and ⃗e as the
preference similarity between a user u and an event e, i.e.,
×⃗
e
simp (u, e) = |⃗uu⃗|·|⃗
. Instead of considering all new events,
e|
we only select top N new events from random walking for
reranking in order to reduce the computation complexity.
Let EunewN denote the set of such top N new events for user
u. Then for each event e ∈ EunewN , our reranking is based
on the following similarity computation:

We use a multivariate Markov chain to transform event
recommendation task into a node convergency probability
computation problem. Let AM N be the adjacency matrix
of type M nodes and type N nodes, where AM N (m, n) = 1
indicates that an explicit or implicit relation exists between
the node n and node m; Otherwise, AM N (m, n) = 0. A
transition matrix PM N is then obtained by row-normalizing
the adjacency matrix AM N . We deﬁne the user query vector
as qu . For each user uj , qu (i) = 1, if i = j, Otherwise,
qu (i) = 0.
We randomly initialize the probability vector of users,
events, groups, hosts and subjects as u(0) , e(0) , g (0) , h(0) , s(0) .
To obtain the convergency probabilities, the random walking
with restart (RWR) algorithm is to iteratively compute the
following equations:
u(t+1) = αEU e(t) PEU + αGU g (t) PGU
+ (1 − αEU − αGU )qu
(t+1)

e

= αU E u

(t)

PU E + αHE h

(1)
(t)

PHE + αSE s

+ (1 − αU E − αHE − αSE )e

(t)

(t)

PSE

PEE

(2)

h(t+1) = αEH e(t) PEH + (1 − αEH )s(t) PSH

(3)

g (t+1) = αU G u(t) PU G + (1 − αU G )s(t) PSG

(4)

(t+1)

s

= αGS g

(t)

(t)

PGS + αHS h

sim(u, e) = simg (u, e) × simp (u, e), e ∈ EunewN ,

which simply strikes a balance between two types of algorithms. The ﬁnal recommendation list is then obtained based
on the event similarity value sim(u, e) in a decreasing order.

PHS

+ (1 − αHS − αGS )e(t) PES

3

(5)

EXPERIMENT

We have crawled data sets from Douban Event for two
main cities, Beijing and Shanghai, in China. For Beijing, we
obtained 6982 events and 88963 users from Jul 1st, 2015 to
Dec 31st, among which in total 80153 eﬀective user-event
pairs are used as data set. For Shanghai, we obtained 6427
events and 75829 users from Sep 1st, 2015 to Dec 31st, among which in total 67822 eﬀective user-event pairs are used
as data set. We use the ﬁve-fold cross validation to obtain
the averaged results. Since most of users have not attended
more than three events, so we mainly examine the top three
recommended events. In our experiments, we compare the
performance for the following algorithms:
CB: The traditional content-based recommendation, where
we use the proposed user history preference feature.
HetG: The peer heterogeneous graph-based random walking,
where we use the event attributes directly in the graph.
HetG+R: The HetG algorithm plus our proposed history preference reranking.
HybG: The proposed hybrid graph-based random walking.
HybG+R: The proposed HybG algorithm plus our reranking
algorithm.
Tables 1 and 2 list all results for Bejing and Shanghai, respectively. We observe that the proposed HybG+R algorithm
outperforms all the other peer algorithms in all performance
metrics, except a slightly lower coverage in the Beijing data set. In particular, the mean average precision (MAP)
improvements of Beijing are 65.17%, 183.94%, 63.63% and
9.91% over the CB, HetG, HetG+R and HybG algorithm,
respectively. And they are 65.56%, 124.10%, 32.35% and
3.46% in Shanghai, respectively. Although all test users have
attended at least three events, some do have attended more.

where u(t+1) , e(t+1) , g (t+1) , h(t+1) , s(t+1) are probability vectors representing the probability that user, event, group,
host and subject nodes are visited in the tth iteration, respectively. αM N denotes the transition weight from one
type node to another type node. For example, in Eq. (1)
user nodes get αEU probability from event nodes, αGU probability from group nodes, and return to the candidate user node with (1 − αEU − αGU ) probability. Since the hybrid graph is of large scale, we do not try to train the
weights for computation complexity considerations. Instead,
we set that the weights of each aﬀecting factor of transition probability are equal. For example, in Eq. (1) we set
αEU = αGU = (1 − αEU − αGU ) = 1/3. The iteration terminates until the pairwise diﬀerence in between two iteration
probability vectors is small than a predeﬁned threshold. It
has been proven in [8] that if the constructed graph is a
connected one, then the iterations can converge. After the
iteration termination, each user u obtains a vector of event
convergency probabilities. We use simg (u, e) to denote the
convergency event probability of event e by a user u.

2.3

(6)

History Preference Reranking

The random walking on a graph is an eﬃcient approach to
embed an event recommendation task into a social network.
However, such a graph might have ignored the history preference of individual user to events, if the transition weights are
not individually set and trained for each user. On the other
hand, as new events have not been consumed and evaluated
by any user, they are directly included in the constructed
graph without considering potential relations to some users,

863

Short Research Paper

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Table 1: Performance comparison of Beijing
%
P@1
P@2
P@3
Precision
Recall
F1
MAP
AUC
Coverage

CB
12.04
11.55
10.78
10.78
2.38
3.90
15.44
24.32
18.44

HetG
3.40
5.66
7.06
7.06
2.45
3.64
8.82
48.48
7.70

HetG+R
8.64
11.20
12.15
12.15
3.74
5.71
15.30
48.48
12.04

HybG
18.93
18.17
17.90
17.90
4.80
7.55
22.77
51.29
16.50

0.3

0.6
CB
HetG
HetG+R
HybG
HybG+R

0.25

HybG+R
21.66
20.32
19.25
19.25
5.07
8.00
25.03
51.33
18.09

0.2

0.4

0.15

0.3

0.1

0.2

0.05

0.1

0

P@1

P@2

MAP

Precision

Recall

(a)

Table 2: Performance comparison of Shanghai
%
P@1
P@2
P@3
Precision
Recall
F1
MAP
AUC
Coverage

CB
23.87
24.14
23.60
23.60
5.76
9.26
30.89
15.56
17.49

HetG
10.09
16.91
21.80
21.80
7.98
11.64
22.82
51.20
9.32

HetG+R
27.54
32.95
35.27
35.27
11.42
17.24
38.64
51.20
15.14

HybG
44.05
44.54
44.48
44.48
13.08
20.20
49.43
52.90
18.39

0

P@1

P@2

MAP

Precision

Recall

F1

(b)

Figure 2: The results of P @1, P @2, M AP , P recision,
Recall and F 1 in Beijing (a) and Shanghai (b).

HybG+R
45.28
45.91
45.65
45.65
13.30
20.58
51.14
53.90
19.19

the event announcements. When considering that recommendation needs not to be done for all users at the same
time, so some feedbacks might be available if some users
could have seen the recommended events ahead of others.
As such, the cold-start problem may be alleviated from such
feedbacks. Our future work shall also study how to obtain
and exploit such feedbacks for event recommendation.

REFERENCES

Therefore, using a recommendation list of three may not
cover all the events been attended by the test users, which
leads to low recall of all algorithms. However, our proposed
algorithms still achieve higher recall than the peer ones. The
results indicate that event recommendation in EBSNs should
consider not only the online and oﬄine social relations but
also the individual user history preferences. The CB algorithm only focuses on the user preference while ignoring the
social relations, which could result in its poorer performance.
On the other hand, although the graph-based approach can
well describe all relations in EBSNs, care must be taken for
prioritizing diﬀerent types of relations in the graph construction. The reasons of the poor HetG performance could be
attributed to its inclusion of nonessential event attributes in
the graph, which introduces many dangling nodes only connecting to one another type of nodes that often induce some
deviated random walking routes. Comparing the results of
with and without using history preference reranking, we notice the potential of boosting recommendation performance,
if multiple algorithms could be appropriately integrated.

4

F1

CB
HetG
HetG+R
HybG
HybG+R

0.5

[1] Hakan Bagci and Pinar Karagoz. Random walk based contextaware activity recommendation for location based social networks. In IEEE International Conference on Data Science and Advanced Analytics (DSAA), pages 1–9. IEEE, 2015.
[2] Jie Bao, Yu Zheng, David Wilkie, and Mohamed F Mokbel. A survey on recommendations in location-based social networks. ACM
Transaction on Intelligent Systems and Technology, 2013.
[3] Elizabeth M Daly and Werner Geyer. Eﬀective event discovery:
using location and social information for scoping event recommendations. In The 5th ACM conference on Recommender systems,
pages 277–280. ACM, 2011.
[4] Pavlos Kefalas, Panagiotis Symeonidis, and Yannis Manolopoulos. A graph-based taxonomy of recommendation algorithms and
systems in lbsns. IEEE Transactions on Knowledge and Data
Engineering, 28(3):604–622, 2016.
[5] Houda Khrouf and Raphaël Troncy. Hybrid event recommendation using linked data and user diversity. In The 7th ACM conference on Recommender systems, pages 185–192. ACM, 2013.
[6] Bixi Li, Bang Wang, Yijun Mo, and Laurencet T. Yang. A novel
random walk and scale control method for event recommendation.
In The 13th IEEE International Conference on Ubiquitous Intelligence and Computing (UIC), pages 567–578, 2016.
[7] Einat Minkov, Ben Charrow, Jonathan Ledlie, Seth Teller, and
Tommi Jaakkola. Collaborative future event recommendation. In
The 19th ACM international conference on Information and
knowledge management, pages 819–828. ACM, 2010.
[8] Tuan-Anh Nguyen Pham, Xutao Li, Gao Cong, and Zhenjie Zhang.
A general graph-based model for recommendation in event-based
social networks. In The 31st IEEE International Conference on
Data Engineering, pages 567–578. IEEE, 2015.
[9] Max Sklar, Blake Shaw, and Andrew Hogue. Recommending interesting events in real-time with foursquare check-ins. In The
6th ACM conference on Recommender systems, pages 311–312.
ACM, 2012.

CONCLUDING REMARKS

In this paper, we have proposed an event recommendation
scheme based on graph random walking and history preference reranking. A hybrid graph is constructed to exploit and
prioritize diverse relations among the available entities of an
EBSN. After the random walking on the constructed graph,
we have proposed to boost the recommendation results via
an individual history preference reranking. Experiments on
real data sets have validated the superiority of the proposed
recommendation scheme.
In our future work, we shall ﬁrst consider how to further
extract more history preferences from semantic analysis of

864

