Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Personalized PageRank in Uncertain Graphs with Mutually
Exclusive Edges∗
Jung Hyun Kim

Mao-Lin Li

Arizona State University
Tempe, AZ 85287
jkim294@asu.edu

Arizona State University
Tempe, AZ, USA 85287
maolinli@asu.edu

K. Selçuk Candan

Maria Luisa Sapino

Arizona State University
Tempe, AZ, USA 85287
candan@asu.edu

ABSTRACT
Measures of node ranking, such as personalized PageRank, are
utilized in many web and social-network based prediction and
recommendation applications. Despite their effectiveness when
the underlying graph is certain, however, these measures become
difficult to apply in the presence of uncertainties, as they are not designed for graphs that include uncertain information, such as edges
that mutually exclude each other. While there are several ways to
naively extend existing techniques (such as trying to encode uncertainties as edge weights or computing all possible scenarios), as we
discuss in this paper, these either lead to large degrees of errors or
are very expensive to compute, as the number of possible worlds
can grow exponentially with the amount of uncertainty. To tackle
with this challenge, in this paper, we propose an efficient Uncertain
Personalized PageRank (UPPR) algorithm to approximately compute
personalized PageRank values on an uncertain graph with edge
uncertainties. UPPR avoids enumeration of all possible worlds, yet
it is able to achieve comparable accuracy by carefully encoding edge
uncertainties in a data structure that leads to fast approximations.
Experimental results show that UPPR is very efficient in terms of
execution time and its accuracy is comparable or better than more
costly alternatives.

1

INTRODUCTION

Measures of node ranking are used in many web and social media based prediction and recommendation applications [6, 24, 27].
There are several ways to rank nodes in a graph ranking, including the well known personalized PageRank (PPR) measure [9, 18],
which weights the nodes in a given graph based on their positions
relative to a given seed set of nodes (Section 2).
∗

This work has been funded by NSF grants #1339835, #1318788, #1610282, #1633381,
and the EU-H2020 grant #690817.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGIR ’17, August 07-11, 2017, Shinjuku, Tokyo, Japan
© 2017 ACM. 978-1-4503-5022-8/17/08. . . $15.00
DOI: 10.1145/3077136.3080794

University of Torino
I-10149 Torino, Italy
mlsapino@di.unito.it

James Adams - Wikipedia

https://en.wikipedia.org/wiki/James_Adams
James	  Adams	  

James Adams
From Wikipedia, the free encyclopedia

James Adams may refer to:
James Adams (Jesuit) (1737–1802), English philologist
James	  Adams	  
James Adams (MP) (1752–1816), British Member of Parliament and Lord of the Admiralty
James Adams (lawyer) (1783–1843), American lawyer and intimate friend of the Joseph Smith,
Jr., founder of the Latter Day Saint movement
James Adams (Massachusetts politician) (1810–1880), mayor of Charlestown, Massachusetts
James "Grizzly" Adams (1812–1860), American hunter, basis of a television program
James Hopkins Adams (1812–1861), American governor of South Carolina
James William Adams (1839–1903), Irish recipient of the Victoria Cross
James Barton Adams (1843–1918), cowboy poet
James F. Adams (1844–1922), American Civil War Medal of Honor recipient
James Truslow Adams (1878–1949), American historian
James Luther Adams (1901–1994), American theologian
James Adams (bishop of Barking) (1915–1999), fifth Bishop of Barking, 1975–1983
James L. Adams (1921–2014), American politician
James B. Adams (born 1926), former attorney, Texas legislator, and acting director of the Federal
Bureau of Investigation
James B. Adams (composer), English composer, organist, and cellist
James B. Adams (professor), professor at Arizona State University
James Adams (diplomat) (born 1932), British diplomat
James M. Adams Jr. (born 1948), Episcopal bishop in America
Jim Adams (musician) (born 1967), American heavy metal guitarist
James W. Adams, carpenter, builder and designer in Kentucky
W. James Adams, Deputy Chief Technologist at NASA
James Rowe Adams, founder of the Center for Progressive Christianity
Jay Boy Adams (born 1949), singer, songwriter, and guitarist born James Wallace Adams
James Adams (entrepreneur), American author and entrepreneur

(a) Ambiguity in data

(b) Uncertain edge

Figure 1: Ambiguity in Wikipedia and its potential impact
on the proximity/cluster analysis
Despite their effectiveness when the underlying graph is certain,
these measures become difficult to apply in the presence of graph
uncertainties, as they are not designed for graphs that include
uncertain information. Unfortunately, in many real world web and
social-network based applications, it may not be possible to obtain a
perfect and complete structure of the underlying knowledge graph
for various reasons: This may be due to lack of information, noise
in data collection, or privacy concerns [17].
Most
existing works on graph uncertainty consider existence
In
sports
uncertainty,
where a given edge exists probabilistically and the
James Adams (cricketer, born 1811) (1811–1851), English cricketer
James Adams
(cricketer, born 1904)
(1904–1988),
Australianedges
cricketer are assumed to be
existence
probabilities
of the
individual
James Adams (cricketer, born 1980) (born 1980), English cricketer
independent
each
other
[2, 10,
16,footballer
20, 26, 29]. In practice,
James Adamsfrom
(footballer,
born 1864)
(1864–1943),
Scottish
James Adams (footballer, born 1896) (1896–1973), English footballer who played for Chesterfield
however,
does
not always
hold:whowe
may
be aware
James this
Adams assumption
(footballer, born 1908)
(1908–1983),
English footballer
played
for West
Albion of an edge, but we may not know between which
of theBromwich
existence
Jim Adams (baseball) (1868–?), American baseball player
(lacrosse)
c. 1929),
American
college
lacrosse coachwe may be able to
pairs Jim
of Adams
nodes
the(born
edge
exists.
For
example,
Jim Adams (soccer) (born 1969), English soccer player
deduce that one of the several friends of an individual in a social
network may be his/her father, but we may not know which friend.
1 of 2
1/24/17, 5:25 PM
As another example, we may know that a name referred to in a web
document is one of the many named entities in a knowledge base,
but we may not know which one is the correct entity (Figure 1(a)).
In this paper, we propose an uncertain edge model with mutual
exclusion that can handle such general forms of uncertainty1 and
consider the node ranking problem in the presence of such edges.
Obtaining node rankings in such a graph is difficult because addition or removal of one single edge can have a drastic effect on
proximity [11]: e.g., addition of just one edge may be sufficient to
1
For relational data, this type of uncertainty is also known as “partial maybe null”,
where one is not sure if the attribute has a value or not, but if the value exists, then it
must be within a specified set[1, 7]

525

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

link two otherwise distant node clusters, thereby significantly altering the proximities of a large number of pairs of nodes in the graph
(Figure 1(b)). A naive way to deal with this would be to measure
expected node proximities by taking into account the likelihoods
of different interpretations and the node proximity measurements
corresponding to each interpretation: one can
(1) first enumerate all possible interpretations (or possible
worlds) of the uncertain graph, where each interpretation
is a possible certain graph;
(2) compute node proximity under each possible world; and
(3) finally, combine all these node proximity measurements
into a single expected proximity value.
It is, however, easy to see that an exhaustive enumeration based
approach will quickly become intractable since (as we see in Section 3) the number of possible worlds can grow exponentially with
the amount of uncertainty in the graph. To tackle this challenge, in
this paper, we propose an efficient Uncertain Personalized PageRank
(UPPR) algorithm to approximately compute personalized PageRank values on an uncertain graph with edge uncertainties. UPPR
avoids enumeration of all possible worlds, yet it is able to achieve
comparable accuracy by carefully encoding edge uncertainties in a
data structure that leads to fast approximations. Experiment results
show that UPPR is very efficient in terms of execution time (multiple
orders faster than other algorithms with similar accuracy) and its
accuracy is close to perfect.
In the next section, we discuss the related literature. In Section 3,
we introduce the uncertain graph model. In Section 4, we discuss
alternative “naive” techniques and discuss their individual shortcomings. Then, in Section 5, we present the proposed efficient and
effective uncertain personalized PageRank (UPPR) technique. We
evaluate the various techniques discussed in the paper in Section 6
using several data sets and conclude in Section 8.

on shortest paths, but on graphs where edges have probabilistic
interpretations for existence in uncertain graphs. Given edges that
are accompanied with the probability of existence, [16, 20] propose
ways to compute reliability and reachability efficiently through
Monte-Carlo sampling. [30] proposed pruning techniques to reduce the complexity of subgraph searching and subgraph pattern
mining in uncertain graphs by avoiding enumeration of all possible
worlds of the uncertain graph.

2.2

Node Ranking in Uncertain Graphs

PageRank is a widely-used measure to compute node importance /
significance in a graph [5]. It takes into account the connectivity
of nodes in the graph by defining the score of the node vi ∈ V as
the amount of time spent on vi in a sufficiently long random walk
on the graph. The personalized PageRank (PPR) [9, 18] technique
extends this in a way that takes into account the context defined
by a given set of important nodes: given a set of seed nodes S ⊆ V ,
→
→
the PPR scores can be represented as a vector Ð
r , where Ð
r =
Ð
→
Ð
→
Ð
→
Ð
→
1
αT r + (1 − α) s , where s [i] = ∥S ∥ if vi ∈ S and s [i] = 0,
otherwise. Intuitively, given a set of nodes S ⊆ V , instead of jumping
to a random node in V with probability (1 − α), the random walk
jumps to one of the nodes in the seed set, S. Since we constrain the
teleportation jumps from any node in the graph to only the given
set of important seed nodes, then the random-walk spends more
time on nodes that are close to the seeds and, thus, those nodes are
declared more significant based on the context defined by the seed
nodes. Due to the cost of obtaining exact PPR scores, non-exact
solutions (based on low rank decomposition [28] or Monte Carlo
methods [22]) have been proposed.
Several works considered the problem of ranking on graphs with
different forms of uncertainties. [13] considered PageRank when
web graphs contain erroneous link information and proposed an approximate solution using interval matrices – the proposed approach
captures the PageRank scores of the nodes affected by fragile links
in terms of lower and upper bounds of PageRank values. A different
node-centric uncertain graph model and node ranking approach are
presented in [23]: in particular, [23] collapses the uncertain parts of
a graph into a cloud graph, where the end of every undetected link
is connected to this cloud graph and computes PageRank scores on
this transformed graph. [12] considered uncertain graphs, where
edges are annotated with existence probabilities and extended the
SimRank measure [14] under probabilistic interpretations of edge
existence and transition matrices.
In this paper, we propose a more general uncertainty model
(of which the existence uncertainty considered by the works listed
above is special case) and discuss efficient ways to compute PPR
under this more powerful model.

2 RELATED WORKS
2.1 Graphs with Uncertainty
Uncertain graphs are common in many applications. For example,
in biological protein interaction networks, uncertainty may be
introduced when the existence of certain interactions are often
only statistically probable [16, 20]. In communication networks,
possibility of link failure needs to be accounted for in finding stable
and reliable paths for packet delivery with minimum cost: this
involves taking into account several forms of uncertainty, including
existence uncertainty, ambiguity, and confusion on edges [10].
In web-based applications, such as social networks, uncertainties
may exist due to inherent lack of prior knowledge regarding the
existence of friendship or influence flow among the users in the
underlying network [17] and it may be critical to take into account
such forms of uncertainty in predicting which nodes are likely to
be connected to which other nodes [24]. Other graph analysis operations that are affected from graph uncertainty include shortest
paths, reachability analysis, and subgraph searching. A common
challenge is that, in the presence of uncertainty, (already expensive) graph operations becomes more expensive. [8] presented an
interval labeled edge model and discussed efficient computation
of minimum paths and trees on such uncertain graphs without
having to enumerate all possible worlds. [26] and [29] also focused

3

PROBLEM FORMULATION

Let G = (V , E) be a directed graph with a set, V , of nodes and a
set, E, of edges. Conventionally, each edge e ∈ E is defined using
two nodes in the graph: a source node source(e) ∈ V and a target
node tarдet(e) ∈ V . In this paper, on the other hand, we divide the
graph edges into certain and uncertain edges.
Definition 3.1 (Certain edges). A certain edge e + ∈ E has well
defined source and target nodes, vsour ce and vdest . We denote

526

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

In the example visualized in Figure 2, there are three possible worlds
defined by e −(2) (= {⟨vi ,vb ⟩, ⟨vi ,vc ⟩, ⟨vi , ϵ⟩} – the last one implying that this edge does not exist) and four possible worlds defined
by e −(3) (= {⟨vi ,vd ⟩, ⟨vi ,ve ⟩, ⟨vi ,v f ⟩, ⟨vi , ϵ⟩} – again the last one
implying that this edge does not exist).
Note that under a more general interpretation, more than one of
the potential combinations, implied by the uncertainty encoded in
the edge, may be possible in the real world.

(1)
(2)

(3)

Definition 3.4 (Possible Worlds of an Edge under Multiple Edge Semantics). Let e ∈ E be a certain or uncertain edge and pwunique (e)
be the corresponding possible worlds covered by this edge under
mutual exclusion semantics. Given this edge, we define all possible worlds covered by this edge under multiple edge semantics as all
possible non-empty subsets of its target set3 . Note that, since a
possible world containing ϵ is equivalent to the world where ϵ has
been removed, we have
⎧
(∥pwunique (e)∥−1)
⎪
,
ϵ ∈ target(e)
⎪2
∥pwmul t ipl e (e)∥ = ⎨ ∥(pwunique (e)∥)
⎪
2
−
1,
otherwise ◇
⎪
⎩

Figure 2: A graph with certain and uncertain edges
this with source(e + ) = {vsour ce } and tarдet(e + ) = {vdest }. We
denote the subset of E consisting of E’s certain edges as E + .
◇
In Figure 2, e +(1) = {⟨vi ,va ⟩} is a certain edge from vi to va . Note
that, since ∥source(e + )∥ = ∥tarдet(e + )∥ = 1, this edge type does
not include any uncertain information. In this paper, we refer to
this certainty as having a unique possible world. Each uncertain
edge, on the other hand, can represent multiple possible worlds:

Under these semantics, in the example in Figure 2, there would be
2(3−1) = 4 possible worlds defined by the uncertain edge e −(2) and

Definition 3.2 (Uncertain Edges). An uncertain edge e − ∈ E has a
well defined source node but does not have a well defined target
node.2 More specifically, we have

2(4−1) = 8 possible worlds defined by e −(3) . For the certain edge
e (1) , this gives 2(1−1) = 1 possible world.

● source(e − ) ⊆ V ,
● tarдet(e − ) ⊆ V ∪ {ϵ} and tarдet(e − ) ≠ {ϵ}, and
● ∥source(e − )∥ = 1 and ∥tarдet(e − )∥ > 1.

3.2

Given the above definitions, we can now define the possible worlds
of a graph with uncertainty:

Above ϵ denotes a non-existing node. We denote the subset of E
consisting of all of E’s uncertain edges as E − .
◇

Definition 3.5 (Possible Worlds of a Graph). Let G = (V , E) be
a directed graph which has a set of nodes V and a set of edges E.
For all e ∈ E, let pw(e) denote the possible worlds (under mutual
exclusion or multiple edge semantics) of the edge e. We define all
possible worlds covered by this graph as the Cartesian product of the
possible worlds of edges: pw(G) = ⨉e∈E pw(e).
◇

Figure 2 includes two uncertain edges, e −(2) and e −(3) with different
degrees. The uncertain edge e −(3) captures a form of uncertainty
with mutual exclusion among the edges from vi to vd , ve , or v f . This
uncertainty, however, is independent from the existence uncertainty
of e −(2) . Therefore, the proposed model allows as a special case the
independent existence uncertainty model considered by many of the
existing works [2, 10, 16, 20, 26, 29].

3.1

If we reconsider Figure 2, under mutual exclusion semantics, this
graph would have 1 × 3 × 4 = 12 possible worlds. In contrast, under
the multiple edge semantics, the graph would have 1 × 4 × 8 = 32
possible worlds. Since uncertain edges have ≥ 2 possible worlds, it
is easy to see that the size of the pw(G) grows exponentially in the
number of uncertain edges; i.e., ∥pw(G)∥ is O(2∥E− ∥ ).

Possible Worlds of an Uncertain Edge

Each uncertain edge implicitly defines multiple possible worlds in
which different interpretations are valid:
Definition 3.3 (Possible Worlds of an Edge under Mutual Exclusion
Semantics). Let e ∈ E be an edge. Let source(e) denote a source
node of the edge and let tarдet(e) ⊆ V ∪ {ϵ} denote the potential
targets of the edge. Given this edge, we define all possible worlds
covered by this edge under mutual exclusion semantics as
pwunique (e)

=

Possible Worlds of a Graph

3.3

PPR under Uncertainty

We now define personalized PageRank under uncertainty.
Definition 3.6 ( Personalized PageRank under Uncertainty). Let
G(V , E) be an uncertain graph. Given a seed set, S, of nodes we
→
can define the personalized PageRank vector, Ð
r , for G as follows:
Ð
→
r = AV G PPR(G , S),

{⟨vi ,v j ⟩∣ (vi = source(e)) ∧ (v j ∈ tarдet(e))}

The possible worlds covered by an uncertain edge consist of all combinations of target nodes; if a target node is potentially non-existent,
then it is also a possible world. ∥pwunique (e)∥ = ∥tarдet(e)∥ is
the number of possible worlds on the edge, e
◇

G i ∈pw (G)

i

where G i denotes a possible world implied by the uncertain graph
→
G and PPR(G i , S) returns a personalized PageRank vector, Ð
r i,
corresponding to G i and seed set S.
◇

2

3

Due to space constraints, in this paper we only deal with the case of uncertainty in
the target nodes, while we consider the edges’ source nodes as given.

This can be extended to the case where there is a constraint in the number of real
edges an edge can potentially represent.

527

Session 5A: Retrieval Models and Ranking 3

…

T2

W11

Tn

W11

W12

W22

W1n

…

T1

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

W2n

T1

…

T2

…

T2

T1

T’

T’
W1

PPR1

…

PPR2

Tn

Average

Average

B_LIN personalized PageRank

conventional personalized PageRank

Tn

PPR2

PPR1

PPRn

…

conventional
personalized PageRank

PPRn

W2

B_LIN personalized
PageRank

Average

Average

PPR

PPR

(a) exhPPR

(b) exhApxPPR
W1n

W21

W22

…

W11 W12

…

Average

W2n

PPR

PPR

(c) collPPR

(d) collApxPPR

(※ Ti = W1i + W2i)

Flattening uncertain edges
into certain edges

Flattening uncertain edges
into certain edges

T’’

T’’

Average

W1

W2

W1
B_LIN personalized
PageRank

PPR

conventional
personalized PageRank

(※ Ti = W1i + W2i)

PPR

W2

B_LIN personalized
PageRank

PPR

(e) collApx2PPR
(f) flatPPR
(g) flatApxPPR
Figure 3: Alternative (naive) approaches for computing PPR values on an uncertain graph
Intuitively, under the assumption that all possible worlds are
equally likely, the above definition of personalized PageRank corresponds to the expected4 values of the node scores.

4

be to enumerate all possible transition matrices corresponding to
all possible worlds of the uncertain graph and then collapse these
transition matrices into a single transition matrix by taking their
average. After this, we can obtain the final PPR scores either by
solving an exact PPR (collPPR, Figure 3(c)) or approximate PPR
(collApxPPR, Figure 3(d)) problem.
Another alternative is to first partition each individual transition matrix of each possible world, G i , and then collapse the intrapartition, W1i , and inter-partition, W2i , transition matrices for all
possible worlds into an inter-partition and an intra-partition matrix
to be processed using B LIN[28] and combined in a post-processing
phase. In Figure 3(e), we refer to this pre-partitioning based alternative approach as collApx2PPR.
Accuracy Problem with Collapsing: The collapsing based
approach can lead to relatively large errors when uncertainty is
concentrated around nodes with large PPR scores: Let G be an
uncertain graph with two possible worlds with transition matrices,
T1 and T2 , respectively. Given these, we can compute the expected
PPR scores as defined in the previous section as

“NAIVE” APPROACHES

In this section, we present several (naive) approaches for computing
PPR values on an uncertain graph (Figure 3):

4.1

Exhaustive Approaches

The most straightforward way to obtain the PPR values on an
uncertain graph is to exhaustively enumerate all possible worlds,
compute the PPRs for each possible world, and combine (i.e., average) the results. Obviously this exhaustive approach (exhPPR),
visualized in Figure 3(a), is likely to be very expensive as it involves
potentially exponential number of PPR computations.
One way to alleviate this cost is to rely on a fast approximate PPR
technique (such as B LIN [28], which partitions the given graph into
subgraphs and pre-processes intra-partition edges, W1 , and interpartition edges, W2 , on these subgraphs in a post-processing phase)
to obtain PPR scores for each possible world (Figure 3(b)). Note that,
while this exhaustive approximate approach, which we refer to as
exhApxPPR, is likely to be faster than the basic approach, since it
involves exponential number of (approximate) PPR computations,
it is still likely to be prohibitively expensive.

4.2

Ð
→
→
→
→
→
→
r = (Ð
r 1+Ð
r 2 )/2 = (α (T1 Ð
r 1 + T2 Ð
r 2 ))/2 + (1 − α)Ð
s,
→
where Ð
s is the teleportation vector for the seeds. In contrast, when
using the collapsing based approach we instead compute
Ð
→
→
→
r ′ = α ((T1 + T2 )/2) Ð
r ′ + (1 − α)Ð
s.

Collapsing-based Approaches

Since the major cost of the exhaustive approach is the number of
exhaustive PPR computations, one way to reduce the cost would
4

→
→
→
Given these, the error term, Ð
e =Ð
r −Ð
r ′ can be obtained as
Ð
→
→
→
→
e = (α (T1 Ð
r 1 + T2 Ð
r 2 ))/2 − α ((T1 + T2 )/2) Ð
r ′.

This can be extended to cases where each possible world has a different likelihood.

528

Session 5A: Retrieval Models and Ranking 3

νa

νi

1/9

νc

1/9

or an approximate PPR (flatApxPPR, Figure 3(g)) technique. Note
that, while they are likely to be faster than both exhaustive and
collapsing-based approaches, flattening-based solutions further
compound the accuracy problems.

νd
1/3
+7/36 1/12

νb

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

1/12
1/12

νe

5

We propose an efficient and effective Uncertain Personalized PageRank (UPPR) algorithm to approximately compute personalized
PageRank values on an uncertain graph with edge uncertainties.
In particular, UPPR avoids enumeration of all possible worlds, yet
is able to achieve high accuracy by carefully encoding edge uncertainties in a data structure that leads to good approximations.

νf

Figure 4: Flattening of the uncertain graph in Figure 2 into
an (approximate) certain graph
→
→
Assuming that this error term is relatively small; i.e., Ð
r ∼Ð
r ′ , we
′
Ð
→
Ð
→
Ð
→
Ð
→
can replace r with r = ( r 1 + r 2 )/2, to obtain
Ð
→
→
→
→
→
e ∼ (α (T Ð
r +T Ð
r ))/2 − α ((T + T )/2) ((Ð
r +Ð
r )/2)
1

∼

1

2

2

1

2

→
→
((T 1 − T 2)/4) Ð
r 1 + ((T 2 − T 1)/4) Ð
r 2.

1

5.1

Special Case: Two Possible Worlds

Let G(V , E) be an edge uncertain graph, Let us split G(V , E) into
two subgraphs: a subgraph, Gc (V , Ec ), consisting of certain edges,
and a subgraph, Gu (V , Eu ), consisting of uncertain edges. Let us
first consider the special case where Gu (V , Eu ) defines only two
possible worlds. In Section 5.2, we will generalize this to the case
where there may be more than two possible worlds.
Let T1 and T2 be transition matrices corresponding to two possiÐ
→
r→
ble worlds of G. The personalized PageRank values Ð
1 and r 2 for
T1 and T2 for seed set, S, are defined in Section 2.2 as
Ð
→
→
r→ = αT Ð
r→ + (1 − α)Ð
s , and Ð
r→ = αT Ð
r→ + (1 − α)Ð
s,

2

In other words, the error term is especially large when the uncertainties (i.e., differences between the transition matrices of the
possible worlds) are concentrated around nodes with large PPR
scores.
Execution Time Problem with Collapsing: Since they reduce the number of PPR computations to just one, the collapsing
based approaches are likely to be much faster than the exhaustive
approach. Nevertheless, since it involves the enumeration of all
possible worlds before obtaining the collapsed transition matrix,
the cost is still exponential in the number of uncertain edges.

4.3

UPPR: PROPOSED APPROACH

1

1 1

2

2 2

→
where α is a residual probability parameter and Ð
s is a re-seeding
Ð
→
→
1
vector such that if a node vi ∈ S, then s [i] = ∥S ∥ and Ð
s [i] = 0,
otherwise. It is easy to see that these two equations can be reÐ
→
written as follows to solve for Ð
r→
1 and r 2 :
Ð
→
→
r→ = (1 − α)(I − αT )−1 Ð
s and Ð
r→ = (1 − α)(I − αT )−1 Ð
s.

Flattening-based Approaches

An alternative approach to avoid the enumeration cost of collapsing
is to approximate the collapsed transition matrix by constructing it
directly from the uncertain graph G by flattening each uncertain
edge into certain edges. Let vi be a node with c outgoing certain
edges and u outgoing uncertain edges. To flatten the outgoing edges
of a node vi , we do the following:

1

1

2

2

Given these, as defined in Section 3.3, we can compute the expected
PPR values for the edge uncertain graph as
1 → Ð
1−α
→
Ð
→
r = (Ð
r 1 + r→
((I − αT1 )−1 + (I − αT2 )−1 )Ð
s.
2) =
2
2
Let us split both T1 and T2 into three parts:

(1) Each outgoing certain edge is associated with 1/(c + u)
transition probability.
(2) Let e − be an outgoing uncertain edge, with t targets
(a) each non-ϵ target of e − is given a transition probability
of (1/t) × (1/(c + u))
(b) if ϵ is a target for e − , then the corresponding (1/t) ×
1/(c + u) transition probability is distributed among
the c certain edges of vi ; if the vertex does not have
any outgoing certain edges, then the probability is
re-distributed among all the nodes in the graph.

T1 = TBL + TX + P1 and T2 = TBL + TX + P2 ,
where TBL +TX corresponds to the certain parts of the graph and P1
and P 2 correspond to the uncertain edges in the two possible worlds.
Let TBL be the block-diagonal matrix, obtained by partitioning the
graph into blocks (for example using METIS [15]), and TX represent
(certain) transitions across these partitions.
Note that, in general, we have ∣TBL ∣ ≫ ∣TX ∣. As we will see
shortly, in this section, we further assume5 that ∣TX ∣ ≫ ∣P1 ∣ and
∣TX ∣ ≫ ∣P2 ∣. As proposed in [28], assuming that the blocks are
−1
sufficiently small, we can efficiently compute Q BL
= (I − αTBL )−1
by first computing the inverse matrices of each block and then
−1
combining these inverse matrices to obtain Q BL
, which itself is in
block-diagonal form. Moreover, since TX , P1 , and P2 are all sparse,
we can also efficiently decompose the TX + P 1 and TX + P2 into

See [19] for details. For instance, in the example visualized in
Figure 2, since there are three outgoing edges, the probabilities of
outgoing edges for vi would be set as 13 on the edge going to va ,
1 1
1
1 1
1
3 × 3 = 9 on the edge going to vb and vc , and 3 × 4 = 12 on the edge
going to vd , ve , and v f . Note that, when ϵ is selected for any of the
outgoing edges, the only available traversal direction is towards va .
Therefore, this would lead to an additional transition probability of
1
1
7
9 + 12 (= 36 ) towards v a . This is visualized in Figure 4.
Once the flattened transition matrix is obtained, we can solve
the final PPR scores either using an exact PPR (flatPPR, Figure 3(f))

TX + P1 ≃ U1S 1V1 and TX + P2 ≃ U2S 2V2 ,
5

(1)

While this is a common assumption in related work [2], in Section 5.5, we discuss
how to relax this assumption in cases where the number of uncertain edges involved
in each possible world is large.

529

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

using a sparse approximate decomposition algorithm, such as [3].
→
→
Ð
→
Given these, we can rewrite Ð
r =Ð
r = 12 (Ð
r→
1 + r 2 ) as
≃

5.2

−1
−1 ⎞
1−α ⎛
Ð
→
(I − α(TBL +U1S 1V1 )) + (I − α(TBL +U2S 2V2 ))
s.
2 ⎝
⎠

⎛
α −1
−1
TX
((nTX + (P1 + ... + Pn )) + α(nTX Q BL
≃(1 − α) I + Q BL
n
⎝

Then, by applying the well-known Sherman-Morrison lemma [25]
on the term (I − α(TBL +Ui Si Vi ))−1 , we can reformulate the above
equation to obtain6
1 − α −1
−1
−1
−1
Ð
→
+
U1 )−1V1Q BL
U1 (S 1−1 − αV1Q BL
r ≃
(Q BL + αQ BL
2
→
s.
Q −1 + αQ −1 U (S −1 − αV Q −1 U )−1V Q −1 )Ð
BL 2

BL

2

2 BL 2

⎞ −1 Ð
−1
−1
→
(P1 + ... + Pn ))) Q BL
s.
TX + TX Q BL
+ (P1 + ... + Pn )Q BL
⎠
(5)
As we see in Section 6, this formulation leads to efficient execution
plans, especially because the term n1 (P1 + ... + Pn ) in Equation 5
can be obtained (without having to enumerate all possible worlds)
directly by computing the ratio of the number of possible worlds
in which a given edge exists.

2 BL

When we further apply the Sherman-Morrison lemma on the term
−1
(S 1−1 − αV1Q BL
U1 )−1 in the above equation, we obtain
−1 Ð
→
(1 − α)Q BL s

Under mutual exclusion semantics: As we have seen in Section 3.1, the possible worlds covered by an uncertain edge consist
of all combinations of its target nodes. Under mutual exclusion
semantics, only one of the edges implied by the uncertain edge can
be valid in the real world. Let vi be a node which has c outgoing
certain edges and u outgoing uncertain edges. If, in a given possible
world, some of the u outgoing uncertain edges map to ϵ, then in that
possible world, the transition probabilities for the remaining certain
and uncertain edges will be higher. We can use this observation to
compute Pavд = n1 (P1 + ... + Pn ) as follows:
Let v j be a target node of an uncertain edge, e − , with
∥tarдet(e − )∥ = k. The value of Pavд (j, i) can be computed as7

α(1 − α) −1
+
Q BL (U1 (S 1 + αS 1V1 (Q BL − αU1S 1V1 )−1U1S 1 )V1
2
→
+ U (S + αS V (Q − αU S V )−1U S )V )Q −1 Ð
s.
2

2

2 2

BL

2 2 2

2 2

2

BL

This equation can be simplified by introducing the terms M 1 =
U1S 1V1 and M 2 = U2S 2V2 (where M 1 ≃ TX + P1 and M 2 ≃ TX + P2 ):
⎛
α
Ð
→
r ≃ (1 − α ) I + Q B−1L ((M 1 + M 2 ) + α (M 1 (Q B L − α M 1 )−1 M 1
⎝
2
⎞
→
+ M 2 (Q B L − α M 2 )−1 M 2 )) Q B−1L Ð
s .
⎠

(2)

Relying on the assumption that ∣TBL ∣ ≫ ∣TX ∣ + ∣P1 ∣ and ∣TBL ∣ ≫
∣TX ∣+∣P2 ∣, we can ignore the terms αM 1 and αM 2 in (Q BL −αM 1 )−1
and (Q BL − αM 2 )−1 in the above equation and rewrite the rest as

u−1
1
1
×( ∑ (
) (ratio of worlds s.t. h of other unc.edges are ϵ )).
k
h=0 c + u − h

Here, p() denotes the probability of a given event.
Note that, if e − has ϵ as a target, then the corresponding transition probability has to be redistributed among the outgoing certain
edges of the node and, if none exists, then it needs to be redistributed
among all nodes in the graph. Let e + be an outgoing certain edge
from vi and let us denote its target as v j . The transition probability,
for e + , taking into account ϵ transition for the uncertain edges, can
be computed as

⎛
α −1
−1
Ð
→
r ≃ (1 − α) I + Q BL
((2TX + P1 + P 2 ) + α(2TX Q BL
TX
2
⎝
−1
−1
+ (P1 + P2 )Q BL
TX + TX Q BL
(P 1 + P2 )

(3)

⎞ −1 Ð
−1
−1
→
+ P 1Q BL
P1 + P2Q BL
P2 )) Q BL
s.
⎠
Furthermore, again relying on the assumption that ∣TBL ∣ ≫ ∣TX ∣ ≫
−1
−1
∣P1 ∣, ∣P 2 ∣, the term P1Q BL
P1 + P 2Q BL
P2 will be negligible next to
−1
−1
(P1 + P2 )Q BLTX + TX Q BL (P1 + P2 ) and thus can be ignored and
Ð
→
r can be approximately computed as
⎛
α −1
−1
(1 − α) I + Q BL
((2TX + (P1 + P2 )) + α(2TX Q BL
TX +
2
⎝
⎞ −1 Ð
−1
−1
→
(P1 + P2 )Q BL
TX + TX Q BL
(P1 + P2 ))) Q BL
s.
⎠

General Case: > 2 Possible Worlds

Ð
→
→
When we have n possible worlds (i.e., Ð
r→
r = n1 (Ð
1 + ... + r n )), the
UPPR equation (Equation 4) can be generalized as

u

1
) (ratio of worlds s.t. h of unc.edges are ϵ).
c
+
u
−h
h=0
However, since e + is a certain edge, it belongs to either intrapartition or cross-partition certain edges. Therefore, when we
compute the Pavд (j, i), we need to compensate for the portion
of the transition probability already accounted in TBL or TX . Let
C(j, i) denote TBL (j, i) + TX (j, i); then, the cell [j, i] in Pavд has
the compensated value
∑(

(4)

Summary and Key Advantages: First of all, assuming that the
−1
blocks are sufficiently small and Q BL
can be efficiently computed,
−1
Ð
→
once Q BL is at hand, solving for r using the above equation involves very sparse matrix multiplications (involving TX and P 1 +P2 )
and thus can be processed very efficiently (see Section 6). A second
advantage of the above formulation is that it can be easily extended
to any number of possible worlds.

⎛u
⎞
1
) (ratio of worlds s.t. h of unc.edges are ϵ) − C(j, i).
∑(
⎝h=0 c + u − h
⎠

6

7

If vi does not have any certain edges, the transition probability is
distributed among all nodes in the graph. See [19] for details.
In both cases, to compute, Pavд , we need to compute the probability that for h out of a given number of uncertain edges, ϵ will
Note that, if v j is a target for multiple outgoing edges from v i , all transition probabilities to v j need to be aggregated (see [19]).

For space considerations, we do not provide the complete sequence of algebraic
operations in each step.

530

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

be selected as the target. Let us be given m = (m 0 + m 1 ) uncertain
edges, such that m 0 many do not contain ϵ in the target set and m 1
many do. Let the maximum target size for this latter set of nodes
be max tarдet. Then, we can group the m 1 uncertain edges to
max tarдet many groups where, each group, дl , consists of uncertain edges with target size l; i.e., ∥д1 ∥ + ∥д2 ∥ + . . . + ∥дmax t ar дet ∥ =
m 1 . Note that, by definition, any uncertain edge which contains ϵ
as a target must also have at least one other node in its target set,
∥д1 ∥ = 0.
Given this, we can compute the probability that h out of m
uncertain edges will be ϵ as

5.3

p(h 2 + h 3 + . . . +hmax t ar дet = h s.t .
∀2≤l ≤max t ar дet hl in ∥дl ∥ edges select ϵ).
The probability p(hl in ∥дl ∥ edges select ϵ) is binomially distributed with B(∥дl ∥, 1/l) – i.e., there are ∥дl ∥ uncertain edges,
each serving as an independent trial with 1/l success rate for
the selection of ϵ among the available targets. Consequently, the
probability that h out of m uncertain edges select ϵ as their targets is distributed as a summation of the binomial distributions
B(∥д2 ∥, 1/2) + . . . + B(∥дmax t ar дet ∥, 1/max tarдet). Algorithms
to efficiently compute summation of binomial distributions are
presented in [4]. See [19] for details.
Under multiple edge semantics: In this case, several of the edges
implied by a given uncertain edge can be simultaneously valid. Let
vi be a node with c outgoing certain edges and u outgoing uncertain
edges. Let v j be a target node of an outgoing edge, e, from vi . The
value of Pavд (j, i) can be computed as8
tot al out

∑

h=0

(

5.4

Efficient Computation of UPPR Scores

Let us partition Equation 5 into 6 subcomponents:
1 →
Ð
→
→) ≃ (1 − α )Q −1 Ð
→
→
−1
−1 Ð
r 1 + ... + rÐ
r = (Ð
n
B L s + α (1 − α )Q B L TX Q B L s
n
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¶ ´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¶

1
) × p ( ∑ num selected tarдet nodes(e) = h) ,
c +h
e∈U

(1)

(2)

α (1 − α ) −1
→
+
Q B L (P 1 + ... + Pn )Q B−1L Ð
s
n
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹¶

where
total out
=
and
∑e∈U ∥tarдet(e)/{ϵ}∥
num selected tarдet nodes(e) is the number of nodes selected as outgoing targets for e in a given possible world (if ϵ is the
only target selected, then num selected tarдet nodes(e) = 0).
Note that, similarly with the case of mutual exclusion semantics,
for certain edges, we need to compensate for transition probabilities
already accounted inTBL orTX . Also, if vi does not have any certain
edges, the transition probability for the case where all uncertain
edges select ϵ as target needs to be distributed among all nodes.
See [19] for details.
To compute Pavд using the above equation, we need to compute
the probability p (∑e∈U num selected tarдet nodes(e) = h). Once
again, this can be achieved by representing the distribution as a sum
of binomial-like distributions: intuitively, if e is an uncertain edge
with ϵ, then the probability that t many non-ϵ targets are selected
can be represented in the form of a binomial with ∥tarдet(e)∥ − 1
many trials and 1/2 success rate. If, on the other hand, e is an
uncertain edge without ϵ, the probability that t many targets are
selected can be represented in the form of a binomial with tarдet(e)
many trials and 1/2 success rate. In the latter case, however, we
need to correct for the situation where t = 0. This is because,
under multiple edge semantics, for an uncertain edge without ϵ, the
selected target nodes must include at least one node in the graph;
thus, t cannot take the value of 0. See [19] for details.
8

Accuracy of UPPR

The UPPR equation (Equation 5) captures the underlying uncertainty in a way that leads to minimal approximation errors under
the assumption ∣TBL ∣ ≫ ∣TX ∣ ≫ ∣P∗ ∣. In particular, the UPPR process has three specific sources for potential errors, each of which is
minimized under these, generally valid, assumptions:
The first source of error is the decomposition of TX + P∗ into
U∗S ∗V∗ using an approximate algorithm, such as [3], that relies on the sparsity of the edges that cross partitions and of the
uncertain edges (see Equation 1). The second source of error is
the assumption that the terms αM 1 and αM 2 are negligible relative to the rest of the terms in Equation 2; this relies on the assumption that TX and P∗ that contribute to M ∗ are both sparse
matrices. The third source of error is the assumption that the
−1
−1
P1 + P2Q BL
P2 in Equation 3 is negligible relative to
term P1Q BL
−1
−1
(P 1 + P2 )Q BLTX + TX Q BL
(P1 + P 2 ).
Note that all three potential sources of error are minimized when
∣TBL ∣ ≫ ∣TX ∣ ≫ ∣P∗ ∣. While the fact that whether ∣TBL ∣ ≫ ∣TX ∣
holds or not depends on the type of graph and the partitioning
algorithm used, whether ∣TX ∣ ≫ ∣P∗ ∣ or not depends on the amount
of uncertain edges in the graph. In Section 5.5, we discuss how
to relax the assumption, ∣TX ∣ ≫ ∣P∗ ∣, in cases where there are
significant number of uncertain edges in the graph rendering ∣P∗ ∣
relatively dense, using a hybrid strategy.

(3)

→
+ α 2 (1 − α )Q B−1L TX Q B−1L TX Q B−1L Ð
s
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹¸ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¶
(4)

α 2 (1 − α ) −1
→
+
Q B L (P 1 + ... + Pn )Q B−1L TX Q B−1L Ð
s
n
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹¶
(5)

α 2 (1 − α ) −1
→
s .
Q B L TX Q B−1L (P 1 + ... + Pn )Q B−1L Ð
+
n
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹¶
(6)

Each of the six subcomponents above contains an extremely sparse
−1
→
re-seeding vector Ð
s . Moreover, Q BL
is a block diagonal matrix and
TX and P∗ are all sparse. Consequently, each of the terms can be
computed, right to left, through efficient vector-matrix multiplications. For example, the subcomponent (2) can be computed from
right to left with the following sequence of efficient operations:
−1 Ð
−1 Ð
−1
−1 Ð
→
→
→
s → Q BL
TX Q BL
s
Q BL
s → TX Q BL
¯
¯ ´¹¹ ¹ ¹ ¸ ¹ ¹ ¹ ¶
±
± ´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¶

∣V ∣×∣V ∣ ∣V ∣×1

∣V ∣×∣V ∣ ∣V ∣×1

∣V ∣×∣V ∣

−1
−1 Ð
→
→ α(1 − α) Q BL
TX Q BL
s .
´¹¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¸ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¹ ¶

Again, all v i to v j transitions need to be aggregated.

∣V ∣×1

531

∣V ∣×1

Session 5A: Retrieval Models and Ranking 3

Data
ego-Facebook
Wiki-Vote
web-NotreDame
web-BerkStan

different
# of
uncertain
edges
different
degree of
edge
uncertainty

# of
uncertain
edges
2
4
6
8(7)
4

# of
# of
nodes
edges
4,039
88,234
7,115
103,689
325,729 1,497,134
685,230 7,600,595
Table 1: Data sets
degree
of edge
uncertainty

edge
semantics

4

mut.excl.
(multiple)

2
4
6(5)
8(6)
10

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

with different numbers of nodes and edges, and graph partitions,
considered in the experiments (the partitions are obtained using
METIS [15]). Table 2 details the volumes of uncertainty we have
experimented with for the results reported in this section. Here,
the “degree of uncertainty” refers to the number of target nodes on
each uncertain edge it represents and the “edge semantics” describes
“mutual exclusion” and “multiple edge” semantics. These together
define the number of possible worlds corresponding to a given
uncertain edge. To obtain uncertain graphs with the specifications
in the table, we select random edges in the original graph and render
them uncertain by augmenting destinations with random nodes.
We further assume that the uncertain edges are located on the seeds
(as discussed in Sections 4.2 and 5.5, uncertain edges away from
the seeds can be flattened into certain edges).

# of
partitions
3
3
50
500

mut.excl.
(multiple)

# of
possible
worlds
16-64
256-4,096
4,096-262,144
65,536-2,097,152
16-16
256-4,096
1,296-65,536
4,096-1,048,576
10,000

6.2

Table 2: Uncertainty scenarios
−1 Ð
−1 Ð
→
→
Moreover, since the terms (P1 + ... + Pn ), Q BL
s , TX Q BL
s,
−1
−1 Ð
→
and Q BLTX Q BL s occur in multiple subcomponents, they can be
cached and reused – once these terms are cached, the rest of the
computations for the six subcomponents can be executed in parallel. Note further that several of the terms above can be cached
and reused for the same uncertain graph with different seed vectors or even graphs with the same certain, but different uncertain
components (to carry out hypothetical, if-then analyses).

5.5

Alternative Approaches

In this section, in addition to UPPR (presented in Section 5), we
considered all alternative approaches discussed in Section 4. As a
further baseline, we also consider a Monte Carlo-based solution
(which starts from the seed nodes, and samples random walks of a
given length) and BEAR [27], a recent PPR computation algorithm,
which originally does not take uncertainty into account. For uncertainty, we use the flattened transition matrix for the transition
matrix and compute PPR values. In the experiments, without loss of
generality, we set the residual probability parameter, α to 0.85. To
compare different algorithms, we consider both efficiency (i.e., PPR
computation time) and accuracy (in terms of the correlations of PPR
rankings for the nodes that are ranked top-50 by the exhaustive
technique, exhPPR).

Hybrid Computation in the Presence of
Large Numbers of Uncertain Edges

7

As we have discussed in the previous section, the accuracy of the
proposed UPPR technique relies on the assumption that ∣TBL ∣ ≫
∣TX ∣ ≫ ∣P∗ ∣. In particular, whether ∣TX ∣ ≫ ∣P∗ ∣ or not depends on
the amount of uncertain edges in the graph: UPPR is likely to be
highly effective and efficient if the number of uncertain edges in
the graph is relatively small. In contrast, as we have seen in Section 4.2, the collapsing (and similarly flattening) based techniques
may lead to large errors if the uncertain edges are concentrated
around nodes with large PPR scores. We can leverage these two
observations to deal with graphs with large numbers of uncertain
edges: The idea is to eliminate uncertain edges in the graph, relying
on the highly efficient flattening technique, away from the seed
nodes of the graph (which are likely to have large PPR scores) and
only maintain uncertain edges in the neighborhoods of the seed
nodes. Consequently, errors due to flattening are minimized as this
technique is utilized only in regions with less likelihood of producing high PPR scores; UPPR errors are also minimized, especially in
large graphs, as the numbers (∣P∗ ∣) of uncertain edges in possible
worlds that UPPR has to deal with have been reduced relative to
the rest of the graph.

RESULTS AND DISCUSSIONS

We start the discussion of the results by considering efficiency and
accuracy of the various algorithms on the Facebook data set, for
different degrees of uncertainty in the graph.
Impact of the Degree of Uncertainty. Figures 5(a) and (b) show
the execution times of different algorithms, as the overall number
of uncertain edges and degree of uncertainty in the graph are increased. As we see in the figure 5, exhaustive and collapsing-based
approaches (which need to enumerate the possible worlds) quickly
become infeasible as the number of possible worlds increases. While
flattening-based approaches are reasonably fast and scale better
than the exhaustive and collapsing-based approaches, they are 1
or 2 order slower than UPPR. BEAR takes less time than UPPR for
PPR computation but the difference between them is negligible.
Figures 5(c) and (d) confirm that execution time savings on UPPR
do not come with any drop in accuracy – UPPR provides similar (or
in some cases better) accuracy to the two collapsing- and flatteningbased approaches, collPPR and flatPPR, that rely on direct computation of PPR from the transition matrix, even though it uses an
approximate solution for PPR. As expected, the accuracy of BEAR
is very poor compared to UPPR and the accuracy is not stable and
affected by the amount of uncertainty. Other techniques such as
collApxPPR, collApx2PPR, and flatApxPPR that similarly solve PPR
approximately, relying on a sparse approximation method, all have
significantly degraded accuracies. This indicates that, by carefully
accounting for the sources of errors, UPPR is able to achieve high

6 EXPERIMENTS
6.1 Datasets and Setup
We ran experiments on a 16-core CPU Nehalem Node with 64 GB
RAM. All codes were implemented in Matlab and run using Matlab
R2013b. Table 1 provides an overview of the four data sets [21],

532

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Exec. Time for different degree of uncertainty
100000
10000
1000

Time (sec.)

Time (sec.)

Exec. Time for different # of edges
100000
10000
1000
100
10
1
0.1
0.01
0.001
0.0001

100
10
1
0.1
0.01
0.001

#ue2
udeg4

#ue4
udeg4

#ue6
udeg4

#ue8
udeg4

#ue4
udeg4

Mutual exclusion

#ue6
udeg4

#ue4
udeg4

#ue7
udeg4

(a) efficiency, varying number of uncertain edges

#ue4
udeg8

#ue4
udeg10

#ue4
udeg4

#ue4
udeg5

#ue4
udeg6

Multiple edge

(b) efficiency, varying degree of uncertainty
Correl. for different degree of uncertainty

Correl. for different # of edges
1

1

0.8

0.8
0.4
0.2
0
-0.2
#ue2
udeg4

#ue4
udeg4

Exec.	  Time	  for	  Uncertain	  0.6
targets	  
Rank Correlation

0.6

Time	  (sec.)	  

Rank Correlation

#ue4
udeg6

Mutual exclusion

Multiple edge

10000	  
100	  
1	  
0.01	  
0.0001	  

#ue6
udeg4

#ue8
udeg4

Mutual exclusion

0.4
0.2
0
-0.2

#ue4
udeg4

#ue6
udeg4

-0.4

#ue7
udeg4

#ue4
udeg4

Multiple edge

exhApxPPR	  

collPPR	  

collApxPPR	  

#ue4
udeg8

#ue4
udeg10

#ue4
udeg4

Mutual exclusion

(c) accuracy, varying number of uncertain edges
exhPPR	  

#ue4
udeg6

#ue4
udeg5

#ue4
udeg6

Multiple edge

(d) accuracy, varying degree of uncertainty
collApx2PPR	  

ﬂatPPR	  

ﬂatApxPPR	  

BEAR	  

UPPR	  

Figure 5: Results on the Facebook data set, for different amount of uncertainty with different edge semantics: UPPR provides
almost perfect accuracy and its execution time is not affected by the amount of uncertainty
accuracies (∼1.0) efficiently (∼0.01 seconds) and avoids accuracy
pitfalls that other schemes are not able to handle effectively.

effectiveness of the various algorithms we presented in the paper for
graphs of different sizes. The figure reports results for two sample
uncertainty complexities: Figures 6(a) and (c) report execution time
and rank correlation for a scenario with mutual exclusion semantics,
whereas Figures 6(b) and (d) consider a scenario with multiple edge
semantics. As we see in this figure, the proposed UPPR method
is scalable, not only in terms of the possible worlds of the graph,
but also the graph size. While the closest algorithms to UPPR in
terms of efficiency and scalability, flatApxPPR and BEAR, suffer
significantly from accuracy degradations, UPPR provides very high
(mostly close to perfect) accuracy in all cases considered in this
section.
Here, we do not present the accuracy results for the largest BerkStan data set as the cost of performing the exhaustive enumeration
needed to obtain the accuracy ground-truth is prohibitive on this
data set. However, the results show that UPPR provides very good
accuracy, while its execution time is minimally effected by graph
size. In fact, on the largest data set, UPPR is even faster than the
BEAR baseline, while providing significantly better accuracy.

UPPR vs. Monte Carlo Method. Additionally, we consider a
Monte Carlo (MC) based alternative to UPPR. [22] notes that (in
regular graphs) for estimating PPR values close to a desired threshold δ (where δ is the expected PPR score; i.e., 1/∣V ∣, where ∣V ∣ is
the number of nodes), a Monte Carlo based algorithm would need
1
),
O(1/(δ × ρ 2 )) = O(∣V ∣/ρ 2 ), samples of length, дeometric( 1−α
where ρ is the relative error and 1 − α is the teleportation rate. This
means that, when we seek high accuracy, Monte Carlo based solutions may be prohibitive [22]. Indeed, for the Facebook data set, with
∼ 4000 nodes, to have 95% accuracy, we would need 4000/0.052 =
1
1, 600, 000 random walk samples (of length ≥ ⌈ 0.15
⌉ = 7, since we
set α to 0.85).
In Table 3, we report the accuracy comparison for a more modest
target error rate of 0.15, which leads to ∼ 150K, random walks
– note that, even in this modest case, taking 150K random walk
samples is more expensive (65 seconds in Matlab) to compute than
UPPR (∼0.01 seconds). In the table, we see that for top-100 to top500 results, Monte Carlo, is able to match the target accuracy in the
presence if mutual exclusion semantics; but fails to do so when all
nodes are considered. In the presence of multiple edge semantics,
MC is able to match the target error rate only when top-500 results
are considered and the results are very poor for top-100 nodes,
even with larger number of samples, with longer lengths. Note that
UPPR is able to achieve significantly higher accuracy (for top-100,
top-500, as well as for all nodes), very cheaply (∼ 0.01 seconds for
this data set as shown in Figure 5).

8

CONCLUSIONS

In this paper, we presented an uncertain edge model with mutual
exclusion and shown that, while there are several ways to naively
extend existing personalized PageRank computation techniques to
graphs with uncertain edges, these either lead to large degrees of
errors or are very expensive to compute in practice. We therefore
proposed a novel Uncertain Personalized PageRank (UPPR) algorithm
to approximately compute personalized PageRank values on such
graphs. Experiments confirmed that the proposed technique has
very high accuracy and is multiple-orders faster than available
algorithms that can provide comparable accuracy.

Different Data Sets and the Impact of the Graph Size. In the
experiments reported in Figure 6, we compare the efficiency and

533

Session 5A: Retrieval Models and Ranking 3

SIGIR’17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Exec. Time for Different Graphs; #ue=7, udeg=4, multiple semantics

Time (sec.)

Time (sec.)

Exec. Time for Different Graphs; #ue=4, udeg=10, mut.excl. semantics
1000000
100000
10000
1000
100
10
1
0.1
0.01
0.001
Facebook

Wiki-Vote

Notredame

Berk-Stan

1000000
100000
10000
1000
100
10
1
0.1
0.01
0.001
Facebook

(a) efficiency, mutual exclusion semantics

Rank Correlation

0.8
0.6
0.4

10000	  

Exec.	  Time	  for	  Uncertain	  targets	  

100	  
1	  

Rank Correlation

Time	  (sec.)	  

Correl. for for Different Graphs; #ue=4, udeg=10, mut.excl. semantics
1

0.01	  
0.0001	  

0.2
0
-0.2
Facebook

Wiki-Vote

Notredame

exhApxPPR	  

collPPR	  

Notredame

Berk-Stan

Correl. for for Different Graphs; #ue=7, udeg=4, multiple semantics

1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Facebook

(c) accuracy, mutual exclusion semantics
exhPPR	  

Wiki-Vote

(b) efficiency, multiple semantics

Wiki-Vote

Notredame

(d) accuracy, multiple semantics
collApxPPR	  

collApx2PPR	  

ﬂatPPR	  

ﬂatApxPPR	  

BEAR	  

UPPR	  

Figure 6: Results in graphs of different sizes: as the figures show, UPPR provides good accuracy and its execution time is
minimally effected by the graph size
Edge
type

Mutual
exclusion
semantics
(#ue=4,
#udeg=10)

Multiple edge
semantics
(#ue=7,
#udeg=4)

# of
Length of
random
random
walks
walks
UPPR
8
150K
10
Monte
20
Carlo
30
8
300K
10
Monte
20
Carlo
30
UPPR
8
150K
10
Monte
20
Carlo
30
8
300K
10
Monte
20
Carlo
30

Top
100
acc.
0.952
0.782
0.816
0.841
0.834
0.814
0.845
0.858
0.813
0.998
0.193
0.145
0.258
0.269
0.193
0.163
0.148
0.155

Top
500
acc.
0.981
0.881
0.919
0.920
0.908
0.911
0.927
0.924
0.913
0.989
0.878
0.900
0.969
0.937
0.945
0.912
0.905
0.901

All
nodes
acc.
0.997
0.525
0.583
0.519
0.533
0.584
0.545
0.588
0.571
0.997
0.571
0.656
0.658
0.696
0.649
0.667
0.660
0.670

[10] J.B. Collins and S.T. Smith. Network Discovery For Uncertain Graphs. Fusion’14,
2014.
[11] C. De Kerchove, L. Ninove, and P. Van Dooren. Maximizing pagerank via outlinks.
Linear Algebra and its Applications, 429(5):1254–1276, 2008.
[12] L. Du, C. Li, H. Chen, L. Tan, and Y. Zhang. Probabilistic simrank computation
over uncertain graphs. Information Sciences. 295:521–535, 2015.
[13] H. Ishii and R. Tempo. Computing the pagerank variation for fragile web data.
SICE Journal of Control, Measurement, and System Integration, 2(1):1–9, 2009.
[14] G. Jeh and J. Widom. SimRank: A Measure of Structural-Context Similarity.
SIGKDD’02, pages 538–543, 2002.
[15] G. Karypis and V. Kumar. A fast and high quality multilevel scheme for partitioning irregular graphs. SIAM Journal on Scientific Computing, 1998.
[16] A. Khan, F. Bonchi, A. Gionis, and F. Gullo. Fast Reliability Search in Uncertain
Graphs. EDBT’14, 2014.
[17] A. Khan and L. Chen. On Uncertain Graphs Modeling and Queries. VLDB’15, pp.
2042–2043, 2015.
[18] J.H. Kim, K.S. Candan, M.Luisa. Sapino. Locality-sensitive and Re-use Promoting
Personalized PageRank computations. Knowl. Inf. Syst. 47(2): 261-299 (2016)
[19] J.H. Kim. Efficient Node Proximity and Node Significance Computations in
Graphs. PhD Thesis. Arizona State University, 2017.
[20] R.-H. Li, J.X. Yu, R. Mao, and T. Jin. Efficient and Accurate Query Evaluation on
Uncertain Graphs via Recursive Stratified Sampling. ICDE’14, 2014.
[21] J. Leskovec and A. Krevl. SNAP Datasets: Stanford Large Network Dataset
Collection. http://snap.stanford.edu/data. 2014.
[22] P. Lofgren. Efficient Algorithms for Personalized PageRank. PhD Thesis, Stanford
University. 2015.
[23] X. Niu, L. Li, and K. Xu. Digrank: Using global degree to facilitate ranking in an
incomplete graph. CIKM’11, pp 2297–2300. 2011.
[24] D.L. Nowell and J. Kleinberg. The Link Prediction Problem for Social Networks.
CIKM’03, 2003.
[25] W. W. Piegorsch and G. Casella. Erratum: inverting a sum of matrices. SIAM
review, 32(3):470, 1990.
[26] M. Potamias, F. Bonchi, A. Gionis, and G. Kollios. K-nearest neighbors in uncertain graphs. VLDB’10, 3(1-2):997–1008, 2010.
[27] K. Shin, J. Jung, L. Sael, and U Kang. BEAR: Block Elimination Approach for
Random Walk with Restart on Large Graphs. SIGMOD’15, 2015.
[28] H. Tong, C. Faloutsos, and J.-Y. Pan. Fast random walk with restart and its
applications. ICDM, pp. 613–622, 2006.
[29] Y. Yuan, L. Chen, G. Wang. Efficiently Answering Probability Threshold-Based
Shortest Path Queries over Uncertain Graphs, DASFAA’10, 2010.
[30] Y. Yuan, G. Wang, H. Wang, and L. Chen. Efficient Subgraph Search over Large
Uncertain Graphs. PVLDB, 4(11), 2011.

Table 3: UPPR vs. MC method on the Facebook graph

REFERENCES
[1] S. Adali, M.L. Sapino, and B. Marshall, A rank algebra to support multimedia
mining applications, MDM’07, 2007
[2] P. Boldi, F. Bonchi, A. Gionis, and T. Tassa. Injecting Uncertainty in Graphs for
Identity Obfuscation, PVLDB’12, 2012.
[3] M. Brand. Fast online svd revisions for lightweight recommender systems. SDM,
pp 37–46. SIAM, 2003.
[4] K. Butler and M. Stephens. The distribution of a sum of binomial random variables,
Stanford University CA Dept of Statistics, 1993.
[5] S. Brin and L. Page. The anatomy of a large-scale hypertextual web search engine.
WWW, 1998.
[6] K.S. Candan and W.S. Li, Using random walks for mining web document associations. PAKDD’00, pp.37–46, 2000.
[7] K.S. Candan, J. Grant, and V.S.Subrahmanian, A Unified Treatment of Null Values
Using Constraints, Information Sciences, 98 (1-4) (1997), pp. 99–156
[8] H. Cao, K.S. Candan, and M.L. Sapino. Skynets: Searching for Minimum Trees in
Graphs with Incomparable Edge Weights. CIKM’11, 2011.
[9] S. Chakrabarti. Dynamic personalized pagerank in entity-relation graphs.
WWW’07, 571–580, 2007.

534

