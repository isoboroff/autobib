ServiceXplorer: A Similarity-based Web Service
Search Engine
Anne H.H. Ngu

Texas State Uni., USA

angu@txstate.edu

Jiangang Ma,
Quan Z. Sheng, Lina Yao

The Uni. of Adelaide, Australia

Scott Julian

Texas State Uni., USA

sjulian@txstate.edu

{mike, qsheng,
lina}@adelaide.edu.au

ABSTRACT

term vectors are less likely to coincide on common terms.
Furthermore, traditional keyword-based search engines compute a similarity score by only matching the keywords at the
same positions in both the query and the document vectors,
without considering the impact of the keywords at neighboring positions.
To overcome these limitations, we have developed an EMDbased similarity search algorithm [3], for ﬁnding similar Web
services based on partial matching of Web service attributes
(e.g., operations, messages, description, service name) or a
combination of them. EMD has been widely employed in
multimedia databases [4] to better approximate human visual perception, speech recognition, and document retrieval
because EMD can eﬀectively capture the diﬀerences between
the distributions of two objects’ main features, and allow for
partial matching. To overcome the limitation of EMD-based
computation complexity, we exploit ﬁltering techniques to
minimize the total number of actual EMD computations.
Furthermore, we have developed a generalized independent
minimization lower bound as a new EMD ﬁlter for partial
matching technique that is suitable for searching Web services. The ﬁlter is then incorporated into a k-NN algorithm
for producing top-k results.
In this paper, we demonstrate an EMD-based Web services search engine: ServiceXplorer, which implements the
techniques presented in [3]. ServiceXplorer adopts a twostep approach for EMD based Web service search: ﬁlter and
reﬁne. The ﬁlter step selects potential candidate Web service records from a database by removing those unqualiﬁed
Web service records. In this step, an indexing scheme (inverted ﬁle index, R-tree) is used to ﬁnd the nearest leaf
nodes to the query when a query is evaluated. At the end of
this step, all records belonging to the found nodes are considered to be the potential candidates, forming a potential
candidate set (PCS). The reﬁne step computes the similarity between the query and Web service records in PCS based
on EMD distances, and picks up the top-k most similar results. In the following sections, we overview the design and
implementation of ServieXplorer and report the proposed
demonstration.

Finding relevant Web services and composing them into
value-added applications is becoming increasingly important
in cloud and service based marketplaces. The key problem
with current approaches to ﬁnding relevant Web services is
that most of them only provide searches over a discrete set
of features using exact keyword matching. We demonstrate
in this paper that by utilizing well known indexing scheme
such as inverted ﬁle and R-tree indexes over Web services attributes, the Earth Mover’s Distance (EMD) algorithm can
be used eﬃciently to ﬁnd partial matches between a query
and a database of Web services.

Categories and Subject Descriptors
H.3.5 [On-line Information Services]: Web-based services; H.3.4 [Systems and Software]: Distributed systems

Keywords
Web Services, Search Engine, Earth Mover’s Distance

1. INTRODUCTION
Similarity-based search of Web services has been a challenging issue over the years. Currently, most existing services search engines such as Woogle [1], WSExpress [6], and
Titan systems [5] adopt keyword based search strategy because it is easy to implement and work well in some cases.
However, the traditional keyword-based service search engines still have several limitations when they are applied to
Web services. First, due to the heterogeneous naming conventions used by diﬀerent service providers, keyword-based
approach may result in a large term dictionary especially
when scaling to massive number of Web services. Second,
as Web service descriptions are typically comprised of limited terms, the resultant term vectors will become extremely
sparse in the space of distinct terms used by all services.
Matching services based on traditional similarity measures
(e.g., cosine similarity) leads to poor results as large sparse

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full citation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGIR’14, July 6–11, 2014, Gold Coast, Queensland, Australia.
ACM 978-1-4503-2257-7/14/07.
http://dx.doi.org/10.1145/2600428.2611179.

2.

SERVICEXPLORER: AN OVERVIEW

The system architecture (Figure 1) consists of four main
components: Web service registration, Web service record
creation, index construction, and EMD similarity search.
The Web service registration component provides a webbased GUI where users can perform several activities such
as uploading a WSDL ﬁle, and entering short descriptions

1251

Figure 1: System architecture of ServiceXplorer
and categories/tags for the uploaded WSDL ﬁle. Currently,
we store the information extracted from WSDL ﬁles in a
Web service database which is implemented in MySQL. The
WSRecords is the main relation which is being referred by all
the other relations. It stores the unique service key, service
name, and the description. Each WSDL can have multiple
messages, operations, QoS, and categories, which are stored
in WSOperation, WSMessage, WSQoS, and WSCategory respectively.
The index construction component is responsible for creating the inverted ﬁle index for the registered Web services.
The inverted ﬁle index list is implemented as a normalized
relation with both WSDL unique term and the service key
as the primary key. Note that we do not keep track of term
frequency since the inverted index is used purely for ﬁltering
purpose, not for ranking relevancy of a term in a Web service
document. For the non-functional quality of service (QoS)
attributes such as reliability and availability, their values
can be expressed as a range. Therefore, R-tree indexes are
created on WSQoS by using the create spatial index data definition statement in MySQL. The collection of QoS is done
by a separate monitoring component which is not within the
scope of this paper. Interested readers are referred to [2].

Figure 2: Scrrenshot on using ServiceXplorer
keyword or multiple keywords, and our system will return
the relevant services to the user. From Figure 2 we can see
that using EMD similarity strategy, there is a higher probability that the top results are always the most relevant ones.
For example, for the query of Temperature Converter, the
second top result is Convert Temperature while using VSM
(vector space model), that particular service is only ranked
the 23rd .
Advanced Similarity Search. ServiceXplorer also oﬀers
an advanced similarity search that enables users to locate
services by selecting diﬀerent index structures, specifying
QoS parameters and comparing the search performance with
that of VSM. For example, if a user chooses EMD search
with index structure, she can simply click the radio button
(With) to select the index. The input query will be processed against the inverted index list by ﬁltering unqualiﬁed
services and then executed against services records in the
database to locate desired Web services using EMD similarity search.

3. DEMONSTRATION

4.

In this section, we demonstrate the functionality of ServiceXplorer. ServiceXplorer can ﬁnd desired services by
providing users with simple search interfaces and eﬀective
search algorithms with EMD. In particular, we demonstrate
the search functions through three main search scenarios:
service registration, simple similarity search, and advanced
similarity search. The system can be accessed from: http:
//eil.cs.txstate.edu/ServiceXplorer.
Service Registration. Service providers can register their
services through the registration interface, provided by ServiceXplorer. Through the interface, the users can choose
appropriate services, specify the function descriptions of the
selected services, and provide related tags. The selected services will be stored in the system after pressing the upload
button. Once registered in the system, the services are further reﬁned and stored as records in a database for eﬀective
similarity search.

REFERENCES

[1] X. Dong et al. Similarity Search for Web Services. In
Proc. of the 30th Intl. Conf. on Very Large Data Bases
(VLDB), 2004.
[2] Y. Liu, A. H. Ngu, and L. Zeng. QoS Computation and
Policing in Dynamic Web Service Selection. In Proc. of
the 13th Intl. World Wide Web Conf. (WWW), 2004.
[3] J. Ma, Q. Z. Sheng, K. Liao, Y. Zhang, and A. H. Ngu.
WS-Finder: A Framework for Similarity Search of Web
Services. In Proc. of the 10th Intl. Conf. on Service
Oriented Computing (ICSOC), 2012.
[4] Y. Rubner, C. Tomasi, and L. Guibas. The Earth
Mover’s Distance as a Metric for Image Retrieval. Intl.
Journal of Computer Vision, 40(2):99–121, 2000.
[5] J. Wu, L. Chen, Y. Xie, and Z. Zheng. Titan: A
System for Eﬀective Web Service Discovery. In Proc. of
the 21st Intl. World Wide Web Conf. (WWW), 2012.
[6] Y. Zhang, Z. Zheng, and M. Lyu. WSExpress: A
QoS-aware Search Engine for Web Services. In Proc. of
IEEE Intl. Conf. on Web Services (ICWS), 2010.

Simple Similarity Search. In this scenario, ServiceXplorer handles the similarity search of Web services by using EMD as the underlying similarity distance only. In the
simple similarity search interface, a user can type a single

1252

